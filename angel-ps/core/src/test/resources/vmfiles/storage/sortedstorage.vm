/*
 * Tencent is pleased to support the open source community by making Angel available.
 *
 * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *
 */


package com.tencent.angel.ml.math2.storage;

import java.util.Arrays;
import com.tencent.angel.ml.matrix.RowType;
import com.tencent.angel.ml.math2.utils.ArrayCopy;
import java.util.Arrays;
import java.util.Random;
import java.util.HashSet;
#if ($itype =="Long")
import sun.reflect.generics.reflectiveObjects.NotImplementedException;
#end

public class ${itype}${dtype}SortedVectorStorage implements ${itype}${dtype}VectorStorage {

    private $itype.toLowerCase() [ ] indices;
    private $dtype.toLowerCase() [ ] values;
    private byte flag; // 001: dense; 010: sparse; 100: sorted
    private int size;
    private $itype.toLowerCase() dim;

    public ${itype}${dtype}SortedVectorStorage() {
		super();
	}

    public ${itype}${dtype}SortedVectorStorage($itype.toLowerCase()  dim, int size, $itype.toLowerCase() [ ] indices, $dtype.toLowerCase() [ ] values) {
        this.flag = 4;
        this.dim = dim;
        this.size = size;
        this.indices = indices;
        this.values = values;
    }

    public ${itype}${dtype}SortedVectorStorage($itype.toLowerCase()  dim, $itype.toLowerCase() [ ] indices, $dtype.toLowerCase() [ ] values) {
        this(dim, indices.length, indices, values);
    }
    
    public ${itype}${dtype}SortedVectorStorage($itype.toLowerCase()  dim, int capacity) {
        this(dim, 0, new $itype.toLowerCase() [capacity], new $dtype.toLowerCase() [capacity]);
    }
        
    public ${itype}${dtype}SortedVectorStorage($itype.toLowerCase()  dim) {
        this(dim, (int)Math.min(64, Math.max(dim, 0)));
    }

    @Override
    public $dtype.toLowerCase()  get($itype.toLowerCase()  idx) {
        if (idx < 0 || idx > dim-1){
            throw new ArrayIndexOutOfBoundsException();
        } else if (size == 0 || idx > indices[size - 1] || idx < indices[0]) {
            return 0;
        } else {
            int i = Arrays.binarySearch(indices, idx);
            return i >= 0 ? values[i] : 0;
        }
    }

    @Override
    public void set($itype.toLowerCase()  idx, $dtype.toLowerCase()  value) {
        if (idx < 0 || idx > dim-1) {
            throw new ArrayIndexOutOfBoundsException();
        }

        // 1. find the insert point
        int point;
        if (size == 0 || idx < indices[0]) {
            point = 0;
        } else if (idx > indices[size - 1]) {
            point = size;
        } else {
            point = Arrays.binarySearch(indices, idx);
            if (point >= 0) {
                values[point] = value;
                return;
            } else {
                point = -(point + 1);
            }
        }

        // 2. check the capacity and insert
        if (size == indices.length){
            $itype.toLowerCase() [ ] newIdxs = new $itype.toLowerCase() [(int)(indices.length * 1.5)];
            $dtype.toLowerCase() [ ] newValues = new $dtype.toLowerCase() [(int)(indices.length * 1.5)];
            if (point == 0) {
                System.arraycopy(indices, 0, newIdxs, 1, size);
                System.arraycopy(values, 0, newValues, 1, size);
            } else if (point == size) {
                System.arraycopy(indices, 0, newIdxs, 0, size);
                System.arraycopy(values, 0, newValues, 0, size);
            } else {
                System.arraycopy(indices, 0, newIdxs, 0, point);
                System.arraycopy(values, 0, newValues, 0, point);
                System.arraycopy(indices, point, newIdxs, point+1, size - point);
                System.arraycopy(values, point, newValues, point+1, size - point);
            }
            newIdxs[point] = idx;
            newValues[point] = value;
            indices = newIdxs;
            values = newValues;
        } else {
            if (point != size) {
                System.arraycopy(indices, point, indices, point+1, size - point);
                System.arraycopy(values, point, values, point+1, size - point);
            }
            indices[point] = idx;
            values[point] = value;
        }

        // 3. increase size
        size++;
    }

    @Override
    public ${itype}${dtype}VectorStorage clone() {
        return new ${itype}${dtype}SortedVectorStorage(dim, size, ArrayCopy.copy(indices), ArrayCopy.copy(values));
    }

    @Override
    public ${itype}${dtype}VectorStorage copy() {
        return new ${itype}${dtype}SortedVectorStorage(dim, size, ArrayCopy.copy(indices), ArrayCopy.copy(values));
    }

#if ($itype == "Int")
    @Override
    public Int${dtype}VectorStorage oneLikeDense() {
        $dtype.toLowerCase() [ ] oneLikeValues = new $dtype.toLowerCase() [dim];
        for (int i=0; i<dim; i++){
            oneLikeValues[i] = 1;
        }
        return new Int${dtype}DenseVectorStorage(oneLikeValues);
    }
#end

    @Override
    public ${itype}${dtype}VectorStorage oneLikeSparse() {
        $dtype.toLowerCase() [ ] oneLikeValues = new $dtype.toLowerCase() [size];
        for (int i=0; i<size; i++){
            oneLikeValues[i] = 1;
        }
        return new ${itype}${dtype}SparseVectorStorage(dim, indices, oneLikeValues);
    }

    @Override
    public ${itype}${dtype}VectorStorage oneLikeSorted() {
        $dtype.toLowerCase() [ ] oneLikeValues = new $dtype.toLowerCase() [size];
        for (int i=0; i<size; i++){
            oneLikeValues[i] = 1;
        }
        return new ${itype}${dtype}SparseVectorStorage(dim, indices, oneLikeValues);
    }

#if ($itype == "Int")
    @Override
    public ${itype}${dtype}VectorStorage oneLikeDense($itype.toLowerCase() dim) {
        $dtype.toLowerCase() [ ] oneLikeValues = new $dtype.toLowerCase() [dim];
        for (int i=0; i<dim; i++){
            oneLikeValues[i] = 1;
        }
        return new ${itype}${dtype}DenseVectorStorage(oneLikeValues);
    }
#end

    @Override
    public ${itype}${dtype}VectorStorage oneLikeSparse($itype.toLowerCase() dim, int capacity) {
        $dtype.toLowerCase() [ ] oneLikeValues = new $dtype.toLowerCase() [capacity];
        $itype.toLowerCase() [ ] indices = new $itype.toLowerCase() [capacity];
        HashSet set = new HashSet<Integer>();
        Random rand = new Random();
        int j = 0;
        while (set.size() < capacity){
            int idx = rand.nextInt((int)dim);
            if (!set.contains(idx)) {
                indices[j] = idx;
                set.add(idx);
                j++;
            }
        }
        for (int i=0; i<capacity; i++){
            oneLikeValues[i] = 1;
        }
        return new ${itype}${dtype}SparseVectorStorage(dim, indices, oneLikeValues);
    }

    @Override
    public ${itype}${dtype}VectorStorage oneLikeSorted($itype.toLowerCase() dim, int capacity) {
        $dtype.toLowerCase() [ ] oneLikeValues = new $dtype.toLowerCase() [capacity];
        $itype.toLowerCase() [ ] indices = new $itype.toLowerCase() [capacity];
        HashSet set = new HashSet<Integer>();
        Random rand = new Random();
        int j = 0;
        while (set.size() < capacity){
            int idx = rand.nextInt((int)dim);
            if (!set.contains(idx)) {
                indices[j] = idx;
                set.add(idx);
                j++;
            }
        }
        Arrays.sort(indices);
        for (int i=0; i<capacity; i++){
            oneLikeValues[i] = 1;
        }
        return new ${itype}${dtype}SparseVectorStorage(dim, indices, oneLikeValues);
    }

    @Override
    public ${itype}${dtype}VectorStorage oneLikeSparse(int capacity) {
        $dtype.toLowerCase() [ ] oneLikeValues = new $dtype.toLowerCase() [capacity];
        $itype.toLowerCase() [ ] indices = new $itype.toLowerCase() [capacity];
        HashSet set = new HashSet<Integer>();
        Random rand = new Random();
        int j = 0;
        while (set.size() < capacity){
            int idx = rand.nextInt((int)dim);
            if (!set.contains(idx)) {
                indices[j] = idx;
                set.add(idx);
                j++;
            }
        }
        for (int i=0; i<capacity; i++){
            oneLikeValues[i] = 1;
        }
        return new ${itype}${dtype}SparseVectorStorage(dim, indices, oneLikeValues);
    }

    @Override
    public ${itype}${dtype}VectorStorage oneLikeSorted(int capacity) {
        $dtype.toLowerCase() [ ] oneLikeValues = new $dtype.toLowerCase() [capacity];
        $itype.toLowerCase() [ ] indices = new $itype.toLowerCase() [capacity];
        HashSet set = new HashSet<Integer>();
        Random rand = new Random();
        int j = 0;
        while (set.size() < capacity){
            int idx = rand.nextInt((int)dim);
            if (!set.contains(idx)) {
                indices[j] = idx;
                set.add(idx);
                j++;
            }
        }
        Arrays.sort(indices);
        for (int i=0; i<capacity; i++){
            oneLikeValues[i] = 1;
        }
        return new ${itype}${dtype}SparseVectorStorage(dim, indices, oneLikeValues);
    }

#if (${itype} == "Int")
    @Override
    public ${itype}${dtype}VectorStorage emptyDense() {
        return new ${itype}${dtype}DenseVectorStorage(dim);
    }
#end

    @Override
    public ${itype}${dtype}VectorStorage emptySparse() {
        return new ${itype}${dtype}SparseVectorStorage(dim, indices.length);
    }

    @Override
    public ${itype}${dtype}VectorStorage emptySorted() {
        return new ${itype}${dtype}SortedVectorStorage(dim, indices.length);
    }

#if (${itype} == "Int")
    @Override
    public ${itype}${dtype}VectorStorage emptyDense(int length) {
        return new ${itype}${dtype}DenseVectorStorage(length);
    }
#end

    @Override
    public ${itype}${dtype}VectorStorage emptySparse($itype.toLowerCase() dim, int capacity) {
        return new ${itype}${dtype}SparseVectorStorage(dim, capacity);
    }

    @Override
    public ${itype}${dtype}VectorStorage emptySorted($itype.toLowerCase() dim, int capacity) {
        return new ${itype}${dtype}SortedVectorStorage(dim, capacity);
    }

    @Override
    public ${itype}${dtype}VectorStorage emptySparse(int capacity) {
        return new ${itype}${dtype}SparseVectorStorage(dim, capacity);
    }

    @Override
    public ${itype}${dtype}VectorStorage emptySorted(int capacity) {
        return new ${itype}${dtype}SortedVectorStorage(dim, capacity);
    }

    @Override
    public $itype.toLowerCase() [ ] getIndices() {
        return indices;
    }

    @Override
    public int size() {
        return size;
    }

	public void setSize(int size) {
	  this.size = size;
	}

    @Override
    public boolean hasKey($itype.toLowerCase()  key) {
        return (size != 0 && key <= indices[size - 1] && key >= indices[0] &&
                Arrays.binarySearch(indices, key) > 0);
    }

    @Override
    public RowType getType() {
#if (${itype} == "Long")
        return RowType.T_$dtype.toUpperCase()_SPARSE_LONGKEY;
#else
        return RowType.T_$dtype.toUpperCase()_SPARSE;
#end
    }

    @Override
    public boolean isDense() {
        return flag == 1;
    }

    @Override
    public boolean isSparse() {
        return flag == 2;
    }

    @Override
    public boolean isSorted() {
        return flag == 4;
    }

    @Override
    public void clear() {
        Arrays.parallelSetAll(indices, (int value) -> 0);
#if ( $dtype == "Float" )
         for (int i = 0; i < values.length; i++) {
             values[i] = 0;
         }
#else
        Arrays.parallelSetAll(values, (int value) -> 0 );
#end
    }

    @Override
    public $dtype.toLowerCase() [ ] getValues() {
        return values;
    }
}
