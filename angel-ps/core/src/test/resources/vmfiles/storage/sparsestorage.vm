/*
 * Tencent is pleased to support the open source community by making Angel available.
 *
 * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *
 */


package com.tencent.angel.ml.math2.storage;

import com.tencent.angel.ml.matrix.RowType;
import it.unimi.dsi.fastutil.ints.*;
import it.unimi.dsi.fastutil.longs.*;
import it.unimi.dsi.fastutil.floats.*;
import it.unimi.dsi.fastutil.doubles.*;
import it.unimi.dsi.fastutil.objects.ObjectIterator;
import java.util.Arrays;
import java.util.Random;
import java.util.HashSet;
#if ($itype =="Long")
import sun.reflect.generics.reflectiveObjects.NotImplementedException;
#end

public class ${itype}${dtype}SparseVectorStorage implements ${itype}${dtype}VectorStorage {

    private ${itype}2${dtype}OpenHashMap map;
    private byte flag; // 001: dense; 010: sparse; 100: sorted
    private $itype.toLowerCase() dim;

    public ${itype}${dtype}SparseVectorStorage() {
		super();
	}

    public ${itype}${dtype}SparseVectorStorage($itype.toLowerCase() dim, ${itype}2${dtype}OpenHashMap map) {
        this.flag = 2;
        this.dim = dim;
        this.map = map;
    }

    public ${itype}${dtype}SparseVectorStorage($itype.toLowerCase() dim, int capacity) {
        this(dim,  new ${itype}2${dtype}OpenHashMap(capacity));
    }

    public ${itype}${dtype}SparseVectorStorage($itype.toLowerCase() dim) {
        this(dim, (int)Math.min(64, Math.max(dim, 0)));
    }

    public ${itype}${dtype}SparseVectorStorage($itype.toLowerCase() dim, $itype.toLowerCase() [ ] indices, $dtype.toLowerCase() [ ] values) {
        this(dim, new ${itype}2${dtype}OpenHashMap(indices, values));
    }

    @Override
    public $dtype.toLowerCase() get($itype.toLowerCase() idx) {
        return map.get(idx);
    }

    @Override
    public void set($itype.toLowerCase() idx, $dtype.toLowerCase() value) {
        map.put(idx, value);
    }

    @Override
    public $itype.toLowerCase() [ ] getIndices() {
        return map.keySet().to${itype}Array();
    }

    @Override
    public ObjectIterator<${itype}2${dtype}Map.Entry> entryIterator() {
        return map.$itype.toLowerCase()2${dtype}EntrySet().fastIterator();
    }

    @Override
    public ${itype}${dtype}VectorStorage clone() {
        return new ${itype}${dtype}SparseVectorStorage(dim, map.clone()) ;
    }

    @Override
    public ${itype}${dtype}VectorStorage copy() {
        return new ${itype}${dtype}SparseVectorStorage(dim, map.clone()) ;
    }

#if ($itype == "Int")
    @Override
    public Int${dtype}VectorStorage oneLikeDense() {
        $dtype.toLowerCase() [ ] oneLikeValues = new $dtype.toLowerCase() [dim];
        for (int i=0; i<dim; i++){
            oneLikeValues[i] = 1;
        }
        return new Int${dtype}DenseVectorStorage(oneLikeValues);
    }
#end

    @Override
    public ${itype}${dtype}VectorStorage oneLikeSparse() {
        int capacity = map.size();
        $dtype.toLowerCase() [ ] oneLikeValues = new $dtype.toLowerCase() [capacity];

        for (int i=0; i<capacity; i++){
            oneLikeValues[i] = 1;
        }
        return new ${itype}${dtype}SparseVectorStorage(dim, map.keySet().to${itype}Array(), oneLikeValues);
    }

    @Override
    public ${itype}${dtype}VectorStorage oneLikeSorted() {
        int capacity = map.size();
        $dtype.toLowerCase() [ ] oneLikeValues = new $dtype.toLowerCase() [capacity];
        $itype.toLowerCase() [ ] indices = map.keySet().to${itype}Array();
        Arrays.sort(indices);
        for (int i=0; i<capacity; i++){
            oneLikeValues[i] = 1;
        }
        return new ${itype}${dtype}SparseVectorStorage(dim, indices, oneLikeValues);
    }

#if ($itype == "Int")
    @Override
    public ${itype}${dtype}VectorStorage oneLikeDense(int dim) {
        $dtype.toLowerCase() [ ] oneLikeValues = new $dtype.toLowerCase() [dim];
        for (int i=0; i<dim; i++){
            oneLikeValues[i] = 1;
        }
        return new ${itype}${dtype}DenseVectorStorage(oneLikeValues);
    }
#end

    @Override
    public ${itype}${dtype}VectorStorage oneLikeSparse($itype.toLowerCase() dim, int capacity) {
        $dtype.toLowerCase() [ ] oneLikeValues = new $dtype.toLowerCase() [capacity];
        $itype.toLowerCase() [ ] indices = new $itype.toLowerCase() [capacity];
        HashSet set = new HashSet<Integer>();
        Random rand = new Random();
        int j = 0;
        while (set.size() < capacity){
            $itype.toLowerCase() idx = rand.nextInt((int)dim);
            if (!set.contains(idx)) {
                indices[j] = idx;
                set.add(idx);
                j++;
            }
        }
        for (int i=0; i<capacity; i++){
            oneLikeValues[i] = 1;
        }
        return new ${itype}${dtype}SparseVectorStorage(dim, indices, oneLikeValues);
    }

    @Override
    public ${itype}${dtype}VectorStorage oneLikeSorted($itype.toLowerCase() dim, int capacity) {
        $dtype.toLowerCase() [ ] oneLikeValues = new $dtype.toLowerCase() [capacity];
        $itype.toLowerCase() [ ] indices = new $itype.toLowerCase() [capacity];
        HashSet set = new HashSet<Integer>();
        Random rand = new Random();
        int j = 0;
        while (set.size() < capacity){
            $itype.toLowerCase() idx = rand.nextInt((int)dim);
            if (!set.contains(idx)) {
                indices[j] = idx;
                set.add(idx);
                j++;
            }
        }
        Arrays.sort(indices);
        for (int i=0; i<capacity; i++){
            oneLikeValues[i] = 1;
        }
        return new ${itype}${dtype}SparseVectorStorage(dim, indices, oneLikeValues);
    }

    @Override
    public ${itype}${dtype}VectorStorage oneLikeSparse(int capacity) {
        $dtype.toLowerCase() [ ] oneLikeValues = new $dtype.toLowerCase() [capacity];
        $itype.toLowerCase() [ ] indices = new $itype.toLowerCase() [capacity];
        HashSet set = new HashSet<Integer>();
        Random rand = new Random();
        int j = 0;
        while (set.size() < capacity){
            int idx = rand.nextInt((int)dim);
            if (!set.contains(idx)) {
                indices[j] = idx;
                set.add(idx);
                j++;
            }
        }
        for (int i=0; i<capacity; i++){
            oneLikeValues[i] = 1;
        }
        return new ${itype}${dtype}SparseVectorStorage(dim, indices, oneLikeValues);
    }

    @Override
    public ${itype}${dtype}VectorStorage oneLikeSorted(int capacity) {
        $dtype.toLowerCase() [ ] oneLikeValues = new $dtype.toLowerCase() [capacity];
        $itype.toLowerCase() [ ] indices = new $itype.toLowerCase() [capacity];
        HashSet set = new HashSet<Integer>();
        Random rand = new Random();
        int j = 0;
        while (set.size() < capacity){
            int idx = rand.nextInt((int)dim);
            if (!set.contains(idx)) {
                indices[j] = idx;
                set.add(idx);
                j++;
            }
        }
        Arrays.sort(indices);
        for (int i=0; i<capacity; i++){
            oneLikeValues[i] = 1;
        }
        return new ${itype}${dtype}SparseVectorStorage(dim, indices, oneLikeValues);
    }

#if (${itype} == "Int")
    @Override
    public ${itype}${dtype}VectorStorage emptyDense() {
        return new ${itype}${dtype}DenseVectorStorage(dim);
    }
#end

    @Override
    public ${itype}${dtype}VectorStorage emptySparse() {
        return new ${itype}${dtype}SparseVectorStorage(dim, map.size());
    }

    @Override
    public ${itype}${dtype}VectorStorage emptySorted() {
        return new ${itype}${dtype}SortedVectorStorage(dim, map.size());
    }

#if (${itype} == "Int")
    @Override
    public ${itype}${dtype}VectorStorage emptyDense(int length) {
        return new ${itype}${dtype}DenseVectorStorage(length);
    }
#end

    @Override
    public ${itype}${dtype}VectorStorage emptySparse($itype.toLowerCase() dim, int capacity) {
        return new ${itype}${dtype}SparseVectorStorage(dim, capacity);
    }

    @Override
    public ${itype}${dtype}VectorStorage emptySorted($itype.toLowerCase() dim, int capacity) {
        return new ${itype}${dtype}SortedVectorStorage(dim, capacity);
    }

    @Override
    public ${itype}${dtype}VectorStorage emptySparse(int capacity) {
        return new ${itype}${dtype}SparseVectorStorage(dim, capacity);
    }

    @Override
    public ${itype}${dtype}VectorStorage emptySorted(int capacity) {
        return new ${itype}${dtype}SortedVectorStorage(dim, capacity);
    }
    
    @Override
    public ${itype}Set indexIterator() {
        return map.keySet();
    }

    @Override
    public int size() {
        return map.size();
    }

    public void setSize(int size) {}

    @Override
    public boolean hasKey($itype.toLowerCase() key) {
        return map.containsKey(key);
    }

    @Override
    public RowType getType() {
#if (${itype} == "Long")
        return RowType.T_$dtype.toUpperCase()_SPARSE_LONGKEY;
#else
        return RowType.T_$dtype.toUpperCase()_SPARSE;
#end
    }

    @Override
    public boolean isDense() {
        return flag == 1;
    }

    @Override
    public boolean isSparse() {
        return flag == 2;
    }

    @Override
    public boolean isSorted() {
        return flag == 4;
    }

    @Override
    public void clear() {
        map.clear();
    }

    @Override
    public ${dtype}Iterator valueIterator() {
        return map.values().iterator();
    }

    @Override
    public $dtype.toLowerCase() [] getValues(){
        return map.values().to${dtype}Array();
    }
}
