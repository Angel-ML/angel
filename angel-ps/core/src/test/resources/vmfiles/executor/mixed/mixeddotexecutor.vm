/*
 * Tencent is pleased to support the open source community by making Angel available.
 *
 * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *
 */


#set ($len = $dtypes.size() - 1)
package com.tencent.angel.ml.math2.ufuncs.executor.mixed;

import com.tencent.angel.exception.AngelException;
import com.tencent.angel.ml.math2.vector.*;
import it.unimi.dsi.fastutil.ints.*;
import it.unimi.dsi.fastutil.longs.*;
import it.unimi.dsi.fastutil.objects.ObjectIterator;

public class MixedDotExecutor {
    public static double apply(ComponentVector v1, Vector v2) {
        if (v1 instanceof CompIntDoubleVector && v2 instanceof IntDoubleVector) {
            return apply((CompIntDoubleVector) v1, (IntDoubleVector) v2);
        } else if (v1 instanceof CompIntDoubleVector && v2 instanceof IntFloatVector) {
            return apply((CompIntDoubleVector) v1, (IntFloatVector) v2);
        } else if (v1 instanceof CompIntDoubleVector && v2 instanceof IntLongVector) {
            return apply((CompIntDoubleVector) v1, (IntLongVector) v2);
        } else if (v1 instanceof CompIntDoubleVector && v2 instanceof IntIntVector) {
            return apply((CompIntDoubleVector) v1, (IntIntVector) v2);
        } else if (v1 instanceof CompIntDoubleVector && v2 instanceof IntDummyVector) {
            return apply((CompIntDoubleVector) v1, (IntDummyVector) v2);
        } else if (v1 instanceof CompIntFloatVector && v2 instanceof IntFloatVector) {
            return apply((CompIntFloatVector) v1, (IntFloatVector) v2);
        } else if (v1 instanceof CompIntFloatVector && v2 instanceof IntLongVector) {
            return apply((CompIntFloatVector) v1, (IntLongVector) v2);
        } else if (v1 instanceof CompIntFloatVector && v2 instanceof IntIntVector) {
            return apply((CompIntFloatVector) v1, (IntIntVector) v2);
        } else if (v1 instanceof CompIntFloatVector && v2 instanceof IntDummyVector) {
            return apply((CompIntFloatVector) v1, (IntDummyVector) v2);
        } else if (v1 instanceof CompIntLongVector && v2 instanceof IntLongVector) {
            return apply((CompIntLongVector) v1, (IntLongVector) v2);
        } else if (v1 instanceof CompIntLongVector && v2 instanceof IntIntVector) {
            return apply((CompIntLongVector) v1, (IntIntVector) v2);
        } else if (v1 instanceof CompIntLongVector && v2 instanceof IntDummyVector) {
            return apply((CompIntLongVector) v1, (IntDummyVector) v2);
        } else if (v1 instanceof CompIntIntVector && v2 instanceof IntIntVector) {
            return apply((CompIntIntVector) v1, (IntIntVector) v2);
        } else if (v1 instanceof CompIntIntVector && v2 instanceof IntDummyVector) {
            return apply((CompIntIntVector) v1, (IntDummyVector) v2);
        } else if (v1 instanceof CompLongDoubleVector && v2 instanceof LongDoubleVector) {
            return apply((CompLongDoubleVector) v1, (LongDoubleVector) v2);
        } else if (v1 instanceof CompLongDoubleVector && v2 instanceof LongFloatVector) {
            return apply((CompLongDoubleVector) v1, (LongFloatVector) v2);
        } else if (v1 instanceof CompLongDoubleVector && v2 instanceof LongLongVector) {
            return apply((CompLongDoubleVector) v1, (LongLongVector) v2);
        } else if (v1 instanceof CompLongDoubleVector && v2 instanceof LongIntVector) {
            return apply((CompLongDoubleVector) v1, (LongIntVector) v2);
        } else if (v1 instanceof CompLongDoubleVector && v2 instanceof LongDummyVector) {
            return apply((CompLongDoubleVector) v1, (LongDummyVector) v2);
        } else if (v1 instanceof CompLongFloatVector && v2 instanceof LongFloatVector) {
            return apply((CompLongFloatVector) v1, (LongFloatVector) v2);
        } else if (v1 instanceof CompLongFloatVector && v2 instanceof LongLongVector) {
            return apply((CompLongFloatVector) v1, (LongLongVector) v2);
        } else if (v1 instanceof CompLongFloatVector && v2 instanceof LongIntVector) {
            return apply((CompLongFloatVector) v1, (LongIntVector) v2);
        } else if (v1 instanceof CompLongFloatVector && v2 instanceof LongDummyVector) {
            return apply((CompLongFloatVector) v1, (LongDummyVector) v2);
        } else if (v1 instanceof CompLongLongVector && v2 instanceof LongLongVector) {
            return apply((CompLongLongVector) v1, (LongLongVector) v2);
        } else if (v1 instanceof CompLongLongVector && v2 instanceof LongIntVector) {
            return apply((CompLongLongVector) v1, (LongIntVector) v2);
        } else if (v1 instanceof CompLongLongVector && v2 instanceof LongDummyVector) {
            return apply((CompLongLongVector) v1, (LongDummyVector) v2);
        } else if (v1 instanceof CompLongIntVector && v2 instanceof LongIntVector) {
            return apply((CompLongIntVector) v1, (LongIntVector) v2);
        } else if (v1 instanceof CompLongIntVector && v2 instanceof LongDummyVector) {
            return apply((CompLongIntVector) v1, (LongDummyVector) v2);
        } else {
            throw new AngelException("The operation is not support!");
        }
    }

#foreach ($itype in $itypes)
#foreach ($idx1 in [0..$len])
#set ($dtype1 = $dtypes.get($idx1))
    private static double apply(Comp${itype}${dtype1}Vector v1, ${itype}DummyVector v2){
        double dotValue = 0.0;
        $itype.toLowerCase() [ ] v2Indices = v2.getIndices();
        for ($itype.toLowerCase() idx : v2Indices) {
            dotValue += v1.get(idx);
        }

        return dotValue;
    }
    
#foreach ($idx2 in [$idx1..$len])
#set ($dtype2 = $dtypes.get($idx2))
    private static double apply(Comp${itype}${dtype1}Vector v1, ${itype}${dtype2}Vector v2) {
        double dotValue = 0.0;
#if ($itype == "Int")
        if (v2.isDense()) {
            $itype.toLowerCase() base = 0;
            $dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();
            for(${itype}${dtype1}Vector part:v1.getPartitions()) {
                if (part.isDense()) {
                    $dtype1.toLowerCase() [ ] partValues = part.getStorage().getValues();
                    for (int i=0; i< partValues.length; i++) {
                        $itype.toLowerCase() idx = base + i;
                        dotValue += partValues[i] * v2Values[idx];
                    }
                } else if (part.isSparse()){
                    ObjectIterator<${itype}2${dtype1}Map.Entry> iter = part.getStorage().entryIterator();
                    while (iter.hasNext()) {
                        ${itype}2${dtype1}Map.Entry entry = iter.next();
                        $itype.toLowerCase() idx = base + entry.get${itype}Key();
                        dotValue += entry.get${dtype1}Value() * v2Values[idx];
                    }
                } else { // isSorted
                    $itype.toLowerCase() [ ] partIndices = part.getStorage().getIndices();
                    $dtype1.toLowerCase() [ ] partValues = part.getStorage().getValues();
                    for (int i=0; i< partIndices.length; i++) {
                        $itype.toLowerCase() idx = base + partIndices[i];
                        dotValue += partValues[i] * v2Values[idx];
                    }
                }
                base += part.getDim();
            }
        } else if (v2.isSparse()) {
#else
        if (v2.isSparse() && v1.size() > v2.size()) {
#end
            ObjectIterator<${itype}2${dtype2}Map.Entry> iter = v2.getStorage().entryIterator();
            while(iter.hasNext()) {
                ${itype}2${dtype2}Map.Entry entry = iter.next();
                $itype.toLowerCase() idx = entry.get${itype}Key();
                dotValue += v1.get(idx) * entry.get${dtype2}Value();
            }
        } else if (v2.isSorted() && v1.size() > v2.size()) { // v2 is sorted
            $itype.toLowerCase() [ ] v2Indices = v2.getStorage().getIndices();
            $dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();
            for (int i=0; i<v2Indices.length; i++) {
                $itype.toLowerCase() idx = v2Indices[i];
                dotValue += v1.get(idx) * v2Values[i];
            }
        } else {
            $itype.toLowerCase() base = 0;
            for(${itype}${dtype1}Vector part:v1.getPartitions()) {
                if (part.isDense()) {
                  $dtype1.toLowerCase() [ ] partValues = part.getStorage().getValues();
                  for (int i=0; i< partValues.length; i++) {
                      $itype.toLowerCase() idx = base + i;
                      dotValue += partValues[i] * v2.get(idx);
                  }
                } else if (part.isSparse()){
                  ObjectIterator<${itype}2${dtype1}Map.Entry> iter = part.getStorage().entryIterator();
                  while (iter.hasNext()) {
                      ${itype}2${dtype1}Map.Entry entry = iter.next();
                      $itype.toLowerCase() idx = base + entry.get${itype}Key();
                      dotValue += entry.get${dtype1}Value() * v2.get(idx);
                  }
                } else { // isSorted
                  $itype.toLowerCase() [ ] partIndices = part.getStorage().getIndices();
                  $dtype1.toLowerCase() [ ] partValues = part.getStorage().getValues();
                  for (int i=0; i< partIndices.length; i++) {
                      $itype.toLowerCase() idx = base + partIndices[i];
                      dotValue += partValues[i] * v2.get(idx);
                  }
                }

                base += part.getDim();
            }
        }

        return dotValue;
    }

#end
#end
#end
}
