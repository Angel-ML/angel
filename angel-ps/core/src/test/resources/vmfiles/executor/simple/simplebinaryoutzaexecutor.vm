/*
 * Tencent is pleased to support the open source community by making Angel available.
 *
 * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *
 */


#set ($len = $dtypes.size() - 1)
package com.tencent.angel.ml.math2.ufuncs.executor.simple;

import com.tencent.angel.exception.AngelException;
import com.tencent.angel.ml.math2.storage.*;
import com.tencent.angel.ml.math2.ufuncs.executor.StorageSwitch;
import com.tencent.angel.ml.math2.ufuncs.expression.Binary;
import com.tencent.angel.ml.math2.vector.*;
import it.unimi.dsi.fastutil.ints.*;
import it.unimi.dsi.fastutil.longs.*;
import it.unimi.dsi.fastutil.objects.ObjectIterator;
import com.tencent.angel.ml.math2.utils.ArrayCopy;
import com.tencent.angel.ml.math2.utils.Constant;

public class SimpleBinaryOutZAExecutor {
    public static Vector apply(Vector v1, Vector v2, Binary op) {
        if (v1 instanceof IntDoubleVector && v2 instanceof IntDoubleVector) {
            return apply((IntDoubleVector) v1, (IntDoubleVector) v2, op);
        } else if (v1 instanceof IntDoubleVector && v2 instanceof IntFloatVector) {
            return apply((IntDoubleVector) v1, (IntFloatVector) v2, op);
        } else if (v1 instanceof IntDoubleVector && v2 instanceof IntLongVector) {
            return apply((IntDoubleVector) v1, (IntLongVector) v2, op);
        } else if (v1 instanceof IntDoubleVector && v2 instanceof IntIntVector) {
            return apply((IntDoubleVector) v1, (IntIntVector) v2, op);
        } else if (v1 instanceof IntDoubleVector && v2 instanceof IntDummyVector) {
            return apply((IntDoubleVector) v1, (IntDummyVector) v2, op);
        } else if (v1 instanceof IntFloatVector && v2 instanceof IntFloatVector) {
            return apply((IntFloatVector) v1, (IntFloatVector) v2, op);
        } else if (v1 instanceof IntFloatVector && v2 instanceof IntLongVector) {
            return apply((IntFloatVector) v1, (IntLongVector) v2, op);
        } else if (v1 instanceof IntFloatVector && v2 instanceof IntIntVector) {
            return apply((IntFloatVector) v1, (IntIntVector) v2, op);
        } else if (v1 instanceof IntFloatVector && v2 instanceof IntDummyVector) {
            return apply((IntFloatVector) v1, (IntDummyVector) v2, op);
        } else if (v1 instanceof IntLongVector && v2 instanceof IntLongVector) {
            return apply((IntLongVector) v1, (IntLongVector) v2, op);
        } else if (v1 instanceof IntLongVector && v2 instanceof IntIntVector) {
            return apply((IntLongVector) v1, (IntIntVector) v2, op);
        } else if (v1 instanceof IntLongVector && v2 instanceof IntDummyVector) {
            return apply((IntLongVector) v1, (IntDummyVector) v2, op);
        } else if (v1 instanceof IntIntVector && v2 instanceof IntIntVector) {
            return apply((IntIntVector) v1, (IntIntVector) v2, op);
        } else if (v1 instanceof IntIntVector && v2 instanceof IntDummyVector) {
            return apply((IntIntVector) v1, (IntDummyVector) v2, op);
        } else if (v1 instanceof LongDoubleVector && v2 instanceof LongDoubleVector) {
            return apply((LongDoubleVector) v1, (LongDoubleVector) v2, op);
        } else if (v1 instanceof LongDoubleVector && v2 instanceof LongFloatVector) {
            return apply((LongDoubleVector) v1, (LongFloatVector) v2, op);
        } else if (v1 instanceof LongDoubleVector && v2 instanceof LongLongVector) {
            return apply((LongDoubleVector) v1, (LongLongVector) v2, op);
        } else if (v1 instanceof LongDoubleVector && v2 instanceof LongIntVector) {
            return apply((LongDoubleVector) v1, (LongIntVector) v2, op);
        } else if (v1 instanceof LongDoubleVector && v2 instanceof LongDummyVector) {
            return apply((LongDoubleVector) v1, (LongDummyVector) v2, op);
        } else if (v1 instanceof LongFloatVector && v2 instanceof LongFloatVector) {
            return apply((LongFloatVector) v1, (LongFloatVector) v2, op);
        } else if (v1 instanceof LongFloatVector && v2 instanceof LongLongVector) {
            return apply((LongFloatVector) v1, (LongLongVector) v2, op);
        } else if (v1 instanceof LongFloatVector && v2 instanceof LongIntVector) {
            return apply((LongFloatVector) v1, (LongIntVector) v2, op);
        } else if (v1 instanceof LongFloatVector && v2 instanceof LongDummyVector) {
            return apply((LongFloatVector) v1, (LongDummyVector) v2, op);
        } else if (v1 instanceof LongLongVector && v2 instanceof LongLongVector) {
            return apply((LongLongVector) v1, (LongLongVector) v2, op);
        } else if (v1 instanceof LongLongVector && v2 instanceof LongIntVector) {
            return apply((LongLongVector) v1, (LongIntVector) v2, op);
        } else if (v1 instanceof LongLongVector && v2 instanceof LongDummyVector) {
            return apply((LongLongVector) v1, (LongDummyVector) v2, op);
        } else if (v1 instanceof LongIntVector && v2 instanceof LongIntVector) {
            return apply((LongIntVector) v1, (LongIntVector) v2, op);
        } else if (v1 instanceof LongIntVector && v2 instanceof LongDummyVector) {
            return apply((LongIntVector) v1, (LongDummyVector) v2, op);
        } else {
            throw new AngelException("Vector type is not support!");
        }
    }

#foreach ($itype in $itypes)
#foreach ($idx1 in [0..$len])
#set ($dtype1 = $dtypes.get($idx1))
#foreach ($idx2 in [$idx1..$len])
#set ($dtype2 = $dtypes.get($idx2))
    private static Vector apply(${itype}${dtype1}Vector v1, ${itype}${dtype2}Vector v2, Binary op) {
        ${itype}${dtype1}VectorStorage newStorage = (${itype}${dtype1}VectorStorage) StorageSwitch.apply(v1, v2, op);
#if (${itype} == "Int")
        if (v1.isDense() && v2.isDense()) {
            $dtype1.toLowerCase() [ ] resValues = newStorage.getValues();
            $dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
            $dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();
            int length = v1Values.length;
            for (int idx = 0; idx < length; idx++) {
                resValues[idx] = op.apply(v1Values[idx], v2Values[idx]);
            }
        } else if (v1.isDense() && v2.isSparse()) {
            if ((v2.isSparse() && v2.getSize() >= Constant.sparseDenseStorageThreshold * v2.dim()) ||
            			  (v2.isSorted() && v2.getSize() >= Constant.sortedDenseStorageThreshold * v2.dim())) {
            	// dense preferred, KeepStorage is guaranteed
                $dtype1.toLowerCase() [ ] newValues = newStorage.getValues();
                $dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
                ObjectIterator<${itype}2${dtype2}Map.Entry> iter = v2.getStorage().entryIterator();
                while (iter.hasNext()) {
                    ${itype}2${dtype2}Map.Entry entry = iter.next();
                    $itype.toLowerCase() idx = entry.get${itype}Key();
                    newValues[idx] = op.apply(v1Values[idx], entry.get${dtype2}Value());
                }
            } else {
            	if (op.isKeepStorage()) {
				  $dtype1.toLowerCase() [] newValues = newStorage.getValues();
				  $dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
				  ObjectIterator<${itype}2${dtype2}Map.Entry> iter = v2.getStorage().entryIterator();
				  while (iter.hasNext()) {
					${itype}2${dtype2}Map.Entry entry = iter.next();
					$itype.toLowerCase() idx = entry.getIntKey();
					newValues[idx] = op.apply(v1Values[idx], entry.get${dtype2}Value());
				  }
				}else {
				  $dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
				  ObjectIterator<${itype}2${dtype2}Map.Entry> iter = v2.getStorage().entryIterator();
				  while (iter.hasNext()) {
					  ${itype}2${dtype2}Map.Entry entry = iter.next();
					  $itype.toLowerCase() idx = entry.get${itype}Key();
					  newStorage.set(idx, op.apply(v1Values[idx], entry.get${dtype2}Value()));
				  }
				}
            }
        } else if (v1.isDense() && v2.isSorted()) {
            if ((v2.isSparse() && v2.getSize() >= Constant.sparseDenseStorageThreshold * v2.dim()) ||
            	   (v2.isSorted() && v2.getSize() >= Constant.sortedDenseStorageThreshold * v2.dim())) {
            	// dense preferred, KeepStorage is guaranteed
                $dtype1.toLowerCase() [ ] newValues = newStorage.getValues();
                $dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
                $itype.toLowerCase() [ ] vIndices = v2.getStorage().getIndices();
                $dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();
                $itype.toLowerCase() size = v2.size();
                for (int i = 0; i < size; i++) {
                    $itype.toLowerCase() idx = vIndices[i];
                    newValues[idx] = op.apply(v1Values[idx], v2Values[i]);
                }
            } else {
            	if (op.isKeepStorage()){
				  $dtype1.toLowerCase() [] newValues = newStorage.getValues();
				  $dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
				  $itype.toLowerCase() [] vIndices = v2.getStorage().getIndices();
				  $dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();
				  $itype.toLowerCase() size = v2.size();
				  for (int i = 0; i < size; i++) {
					$itype.toLowerCase() idx = vIndices[i];
					newValues[idx] = op.apply(v1Values[idx], v2Values[i]);
				  }
				} else {
				  $dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
				  $itype.toLowerCase() [] vIndices = v2.getStorage().getIndices();
				  $dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();
				  $itype.toLowerCase() size = v2.size();
				  for (int i=0; i < size; i++) {
					  $itype.toLowerCase() idx = vIndices[i];
					 newStorage.set(idx, op.apply(v1Values[idx], v2Values[i]));
				  }
				}
            }
        } else if (v1.isSparse() && v2.isDense()) {
            if (op.isKeepStorage() || v1.size() <= Constant.sparseDenseStorageThreshold  * v1.getDim()) {
                ObjectIterator<${itype}2${dtype1}Map.Entry> iter = v1.getStorage().entryIterator();
                $dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();
                while (iter.hasNext()) {
                    ${itype}2${dtype1}Map.Entry entry = iter.next();
                    $itype.toLowerCase() idx = entry.get${itype}Key();
                    newStorage.set(idx, op.apply(entry.get${dtype1}Value(), v2Values[idx]));
                }
            } else {
                $dtype1.toLowerCase() [ ] newValues = newStorage.getValues();
                ObjectIterator<${itype}2${dtype1}Map.Entry> iter = v1.getStorage().entryIterator();
                $dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();
                while (iter.hasNext()) {
                    ${itype}2${dtype1}Map.Entry entry = iter.next();
                    int idx = entry.get${itype}Key();
                    newValues[idx] = op.apply(entry.get${dtype1}Value(), v2Values[idx]);
                }
            }
        } else if (v1.isSorted() && v2.isDense()) {
            if (op.isKeepStorage() || v1.size() <= Constant.sortedDenseStorageThreshold  * v1.getDim()) {
                $dtype1.toLowerCase() [] resValues = newStorage.getValues();
                $itype.toLowerCase() [] resIndices = newStorage.getIndices();

                $itype.toLowerCase() [] v1Indices = v1.getStorage().getIndices();
                $dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
                $dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();
                $itype.toLowerCase() size = v1.size();
                for (int i=0; i < size; i++) {
                	resIndices[i] = v1Indices[i];
                    resValues[i] = op.apply(v1Values[i], v2Values[v1Indices[i]]);
                }
                newStorage.setSize(resIndices.length);
            } else {
                $dtype1.toLowerCase() [] newValues = newStorage.getValues();
                $itype.toLowerCase() [] v1Indices = v1.getStorage().getIndices();
                $dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
                $dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();
                $itype.toLowerCase() size = v1.size();
                for (int k = 0; k < size; k++) {
                    $itype.toLowerCase() idx = v1Indices[k];
                    newValues[idx] = op.apply(v1Values[k], v2Values[idx]);
                }
            }
        } else if (v1.isSparse() && v2.isSparse()) {
#else
        if (v1.isSparse() && v2.isSparse()) {
#end
            if (v1.getSize() >= v2.getSize() && v2.getSize() <= Constant.sparseDenseStorageThreshold * v2.dim()) {
            	// sparse preferred, keep storage guaranteed
			  ObjectIterator<${itype}2${dtype2}Map.Entry> iter = v2.getStorage().entryIterator();
			  ${itype}${dtype1}VectorStorage v1storage = v1.getStorage();
			  while (iter.hasNext()) {
				${itype}2${dtype2}Map.Entry entry = iter.next();
				$itype.toLowerCase() idx = entry.get${itype}Key();
				if (v1storage.hasKey(idx)) {
				  newStorage.set(idx, op.apply(v1.get(idx), entry.get${dtype2}Value()));
				}
			  }
			} else if (v1.getSize() <= v2.getSize() && v1.getSize() <= Constant.sparseDenseStorageThreshold * v1.dim()) {
			  // sparse preferred, keep storage guaranteed
			  ObjectIterator<${itype}2${dtype1}Map.Entry> iter = v1.getStorage().entryIterator();
			  ${itype}${dtype2}VectorStorage v2storage = v2.getStorage();
			  while (iter.hasNext()) {
				${itype}2${dtype1}Map.Entry entry = iter.next();
				$itype.toLowerCase() idx = entry.get${itype}Key();
				if (v2storage.hasKey(idx)) {
				  newStorage.set(idx,op.apply(entry.get${dtype1}Value(), v2.get(idx)));
				}
			  }
			} else if (v1.getSize() > v2.getSize() && v2.getSize() > Constant.sparseDenseStorageThreshold * v2.dim()) {
			  // preferred dense
			  ObjectIterator<${itype}2${dtype2}Map.Entry> iter = v2.getStorage().entryIterator();
			  ${itype}${dtype1}VectorStorage v1storage = v1.getStorage();
			  while (iter.hasNext()) {
				${itype}2${dtype2}Map.Entry entry = iter.next();
				$itype.toLowerCase() idx = entry.get${itype}Key();
				if (v1storage.hasKey(idx)) {
				  newStorage.set(idx, op.apply(v1.get(idx), entry.get${dtype2}Value()));
				}
			  }
			} else {// preferred dense
			  ObjectIterator<${itype}2${dtype1}Map.Entry> iter = v1.getStorage().entryIterator();
			  ${itype}${dtype2}VectorStorage v2storage = v2.getStorage();
			  while (iter.hasNext()) {
				${itype}2${dtype1}Map.Entry entry = iter.next();
				$itype.toLowerCase() idx = entry.get${itype}Key();
				if (v2storage.hasKey(idx)) {
				  newStorage.set(idx,op.apply(entry.get${dtype1}Value(), v2.get(idx)));
				}
			  }
			}
        } else if (v1.isSparse() && v2.isSorted()) {
        	if (v1.getSize() >= v2.getSize() && v2.getSize() <= Constant.sparseDenseStorageThreshold * v2.dim()) {
			  // sparse preferred, keep storage guaranteed
			  $itype.toLowerCase() [] v2Indices = v2.getStorage().getIndices();
			  $dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();

			  ${itype}${dtype1}VectorStorage storage = v1.getStorage();
			  $itype.toLowerCase() size = v2.size();
			  for (int i = 0; i < size; i++) {
				$itype.toLowerCase() idx = v2Indices[i];
				if (storage.hasKey(idx)) {
				  newStorage.set(idx, op.apply(storage.get(idx), v2Values[i]));
				}
			  }
			} else if (v1.getSize() <= v2.getSize() && v1.getSize() <= Constant.sparseDenseStorageThreshold * v1.dim()){
			  // sparse preferred, keep storage guaranteed
			  ObjectIterator<${itype}2${dtype1}Map.Entry> iter = v1.getStorage().entryIterator();
			  ${itype}${dtype2}VectorStorage v2storage = v2.getStorage();
			  while (iter.hasNext()) {
				${itype}2${dtype1}Map.Entry entry = iter.next();
				$itype.toLowerCase() idx = entry.get${itype}Key();
				if (v2storage.hasKey(idx)) {
				  newStorage.set(idx, op.apply(entry.get${dtype1}Value(), v2.get(idx)));
				}
			  }
			} else if (v1.getSize() > v2.getSize() && v2.getSize() > Constant.sparseDenseStorageThreshold * v2.dim()) {
			  // preferred dense
			  $itype.toLowerCase() [] v2Indices = v2.getStorage().getIndices();
			  $dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();

			  ${itype}${dtype1}VectorStorage storage = v1.getStorage();
			  $itype.toLowerCase() size = v2.size();
			  for (int i = 0; i < size; i++) {
				$itype.toLowerCase() idx = v2Indices[i];
				if (storage.hasKey(idx)) {
				  newStorage.set(idx, op.apply(storage.get(idx), v2Values[i]));
				}
			  }
			} else { // preferred dense
			  ObjectIterator<${itype}2${dtype1}Map.Entry> iter = v1.getStorage().entryIterator();
			  ${itype}${dtype2}VectorStorage v2storage = v2.getStorage();
			  while (iter.hasNext()) {
				${itype}2${dtype1}Map.Entry entry = iter.next();
				$itype.toLowerCase() idx = entry.get${itype}Key();
				if (v2storage.hasKey(idx)) {
				  newStorage.set(idx, op.apply(entry.get${dtype1}Value(), v2.get(idx)));
				}
			  }
			}
        } else if (v1.isSorted() && v2.isSparse()) {
        	if (v1.getSize() >= v2.getSize() && v2.getSize() <= Constant.sortedDenseStorageThreshold * v2.dim()) {
			  if (op.isKeepStorage()) {// sorted preferred v2.size
				ObjectIterator<${itype}2${dtype2}Map.Entry> iter = v2.getStorage().entryIterator();
				${itype}${dtype1}VectorStorage v1storage = v1.getStorage();
				while (iter.hasNext()) {
				  ${itype}2${dtype2}Map.Entry entry = iter.next();
				  $itype.toLowerCase() idx = entry.get${itype}Key();
				  if (v1storage.hasKey(idx)) {
					newStorage.set(idx, op.apply(v1storage.get(idx), entry.get${dtype2}Value()));
				  }
				}
				newStorage.setSize((int)v2.getSize());
			  } else {//sparse preferred
				ObjectIterator<${itype}2${dtype2}Map.Entry> iter = v2.getStorage().entryIterator();
				${itype}${dtype1}VectorStorage v1storage = v1.getStorage();
				while (iter.hasNext()) {
				  ${itype}2${dtype2}Map.Entry entry = iter.next();
				  $itype.toLowerCase() idx = entry.get${itype}Key();
				  if (v1storage.hasKey(idx)) {
					newStorage.set(idx, op.apply(v1storage.get(idx), entry.get${dtype2}Value()));
				  }
				}
			  }
			} else if (v1.getSize() <= v2.getSize() && v1.getSize() <= Constant.sortedDenseStorageThreshold * v1.dim()) {
			  if (op.isKeepStorage()) {// sorted preferred v1.size
				$itype.toLowerCase() [] resIndices = newStorage.getIndices();
				$dtype1.toLowerCase() [] resValues = newStorage.getValues();

				$itype.toLowerCase() [] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
				${itype}${dtype2}VectorStorage storage = v2.getStorage();
				$itype.toLowerCase() size = v1.size();
				for (int i = 0; i < size; i++) {
				  $itype.toLowerCase() idx = v1Indices[i];
				  if (storage.hasKey(idx)) {
					resIndices[i] = idx;
					resValues[i] = op.apply(v1Values[i], storage.get(idx));
				  }
				}
				newStorage.setSize((int)v1.getSize());
			  } else {
			  	$itype.toLowerCase() [] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
				${itype}${dtype2}VectorStorage storage = v2.getStorage();
				$itype.toLowerCase() size = v1.size();
				for (int i = 0; i < size; i++) {
				  $itype.toLowerCase() idx = v1Indices[i];
				  if (storage.hasKey(idx)) {
					newStorage.set(idx, op.apply(v1Values[i], storage.get(idx)));
				  }
				}
			  }
			} else if (v1.getSize() > v2.getSize() && v2.getSize() > Constant.sortedDenseStorageThreshold * v2.dim()) {
			  ObjectIterator<${itype}2${dtype2}Map.Entry> iter = v2.getStorage().entryIterator();
			  ${itype}${dtype1}VectorStorage v1storage = v1.getStorage();
			  while (iter.hasNext()) {
				${itype}2${dtype2}Map.Entry entry = iter.next();
				$itype.toLowerCase() idx = entry.get${itype}Key();
				if (v1storage.hasKey(idx)) {
				  newStorage.set(idx, op.apply(v1storage.get(idx), entry.get${dtype2}Value()));
				}
			  }
			} else {//dense preferred
			  if (op.isKeepStorage()){// sorted preferred v1.size
				$itype.toLowerCase() [] resIndices = newStorage.getIndices();
				$dtype1.toLowerCase() [] resValues = newStorage.getValues();

				$itype.toLowerCase() [] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
				${itype}${dtype2}VectorStorage storage = v2.getStorage();
				$itype.toLowerCase() size = v1.size();
				for (int i = 0; i < size; i++) {
				  $itype.toLowerCase() idx = v1Indices[i];
				  if (storage.hasKey(idx)) {
					resIndices[i] = idx;
					resValues[i] = op.apply(v1Values[i], storage.get(idx));
				  }
				}
				newStorage.setSize((int)v1.getSize());
			  } else {//dense preferred
				$itype.toLowerCase() [] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
				${itype}${dtype2}VectorStorage storage = v2.getStorage();
				$itype.toLowerCase() size = v1.size();
				for (int i = 0; i < size; i++) {
				  $itype.toLowerCase() idx = v1Indices[i];
				  if (storage.hasKey(idx)) {
					newStorage.set(idx, op.apply(v1Values[i], storage.get(idx)));
				  }
				}
			  }
			}
        } else if (v1.isSorted() && v2.isSorted()) {
            int v1Pointor = 0;
            int v2Pointor = 0;
            $itype.toLowerCase() size1 = v1.size();
            $itype.toLowerCase() size2 = v2.size();

            if (v1.getSize() >= v2.getSize() && v2.getSize() <= Constant.sortedDenseStorageThreshold * v2.dim()) {
            	if (op.isKeepStorage()) {//sorted v2.size
				  $itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
				  $dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
				  $itype.toLowerCase() [ ] v2Indices = v2.getStorage().getIndices();
				  $dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();
				  $itype.toLowerCase() [ ] resIndices = ArrayCopy.copy(v2Indices);
				  $dtype1.toLowerCase() [ ] resValues = new $dtype1.toLowerCase() [v2Values.length];

				  while (v1Pointor < size1 && v2Pointor < size2) {
					  if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
						  resValues[v2Pointor] = op.apply(v1Values[v1Pointor], v2Values[v2Pointor]);
						  v1Pointor++;
						  v2Pointor++;
					  } else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
						  v1Pointor++;
					  } else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
						  v2Pointor++;
					  }
				  }
				   newStorage = new ${itype}${dtype1}SortedVectorStorage(v1.getDim(), (int)v2.size(), resIndices, resValues);
				} else {
				  $itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
				  $dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
				  $itype.toLowerCase() [ ] v2Indices = v2.getStorage().getIndices();
				  $dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();

				  while (v1Pointor < size1 && v2Pointor < size2) {
					  if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
						   newStorage.set(v1Indices[v1Pointor], op.apply(v1Values[v1Pointor], v2Values[v2Pointor]));
						  v1Pointor++;
						  v2Pointor++;
					  } else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
						  v1Pointor++;
					  } else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
						  v2Pointor++;
					  }
				  }
				}
			} else if (v1.getSize() <= v2.getSize() && v1.getSize() <= Constant.sortedDenseStorageThreshold * v1.dim()) {
			  if (op.isKeepStorage()) {
				$itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() [ ] v2Indices = v2.getStorage().getIndices();
				$dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();
				$itype.toLowerCase() [ ] resIndices = ArrayCopy.copy(v1Indices);
				$dtype1.toLowerCase() [ ] resValues = newStorage.getValues();

				while (v1Pointor < size1 && v2Pointor < size2) {
					if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
						resValues[v1Pointor] = op.apply(v1Values[v1Pointor], v2Values[v2Pointor]);
						v1Pointor++;
						v2Pointor++;
					} else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
						v1Pointor++;
					} else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
						v2Pointor++;
					}
				}
				 newStorage = new ${itype}${dtype1}SortedVectorStorage(v1.getDim(), (int)v1.size(), resIndices, resValues);
			  } else {// sparse preferred
				$itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() [ ] v2Indices = v2.getStorage().getIndices();
				$dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();

				while (v1Pointor < size1 && v2Pointor < size2) {
				  if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
					newStorage.set(v1Indices[v1Pointor], op.apply(v1Values[v1Pointor], v2Values[v2Pointor]));
					v1Pointor++;
					v2Pointor++;
				  } else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
					v1Pointor++;
				  } else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
					v2Pointor++;
				  }
				}
			  }
			} else if (v1.getSize() > v2.getSize() && v2.getSize() > Constant.sortedDenseStorageThreshold * v2.dim()) {
			  if (op.isKeepStorage()) {// sorted v2.size
				$itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() [ ] v2Indices = v2.getStorage().getIndices();
				$dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();
				$itype.toLowerCase() [ ] resIndices = ArrayCopy.copy(v2Indices);
				$dtype1.toLowerCase() [ ] resValues = newStorage.getValues();

				while (v1Pointor < size1 && v2Pointor < size2) {
				  if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
					resValues[v2Pointor] = op.apply(v1Values[v1Pointor], v2Values[v2Pointor]);
					v1Pointor++;
					v2Pointor++;
				  } else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
					v1Pointor++;
				  } else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
					v2Pointor++;
				  }
				}
				newStorage = new ${itype}${dtype1}SortedVectorStorage(v1.getDim(), (int) v2.size(), resIndices, resValues);
			  } else {// dense preferred
				$itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() [ ] v2Indices = v2.getStorage().getIndices();
				$dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();

				while (v1Pointor < size1 && v2Pointor < size2) {
				  if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
					newStorage.set(v1Indices[v1Pointor],op.apply(v1Values[v1Pointor], v2Values[v2Pointor]));
					v1Pointor++;
					v2Pointor++;
				  } else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
					v1Pointor++;
				  } else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
					v2Pointor++;
				  }
				}
			  }
			} else {
			  if (op.isKeepStorage()) {
				$itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() [ ] v2Indices = v2.getStorage().getIndices();
				$dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();
				$itype.toLowerCase() [ ] resIndices = ArrayCopy.copy(v1Indices);
				$dtype1.toLowerCase() [ ] resValues = newStorage.getValues();

				while (v1Pointor < size1 && v2Pointor < size2) {
				  if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
					resValues[v1Pointor] = op.apply(v1Values[v1Pointor], v2Values[v2Pointor]);
					v1Pointor++;
					v2Pointor++;
				  } else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
					v1Pointor++;
				  } else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
					v2Pointor++;
				  }
				}
				newStorage = new ${itype}${dtype1}SortedVectorStorage(v1.getDim(), (int) v1.size(), resIndices, resValues);
			  } else {// dense preferred
				$itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() [ ] v2Indices = v2.getStorage().getIndices();
				$dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();
				$dtype1.toLowerCase() [ ] resValues = newStorage.getValues();

				while (v1Pointor < size1 && v2Pointor < size2) {
				  if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
				  	newStorage.set(v1Indices[v1Pointor],op.apply(v1Values[v1Pointor], v2Values[v2Pointor]));
					v1Pointor++;
					v2Pointor++;
				  } else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
					v1Pointor++;
				  } else { // v1Indices[v1Pointor] > vIndices[v2Pointor]
					v2Pointor++;
				  }
				}
			  }
			}
        } else {
            throw new AngelException("The operation is not support!");
        }

        return new ${itype}${dtype1}Vector(v1.getMatrixId(), v1.getRowId(), v1.getClock(), v1.getDim(), newStorage) ;
    }

#end
#end
#end


#foreach (${itype} in ${itypes})
#foreach (${dtype1} in ${dtypes})
    public static Vector apply(${itype}${dtype1}Vector v1, ${itype}DummyVector v2, Binary op) {
        ${itype}${dtype1}VectorStorage newStorage = (${itype}${dtype1}VectorStorage)StorageSwitch.apply(v1, v2, op);

#if (${itype} == "Int")
        if (v1.isDense()) {
            if (op.isKeepStorage() || v2.getSize() >= Constant.sparseDenseStorageThreshold * v2.dim()) {
                $dtype1.toLowerCase() [] resValues = newStorage.getValues();

                $dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
                $itype.toLowerCase() [] vIndices = v2.getIndices();
                for ($itype.toLowerCase() idx : vIndices) {
                    resValues[idx] = op.apply(v1Values[idx], 1);
                }
            } else {
                $dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
                $itype.toLowerCase() [ ] vIndices = v2.getIndices();
                for ($itype.toLowerCase() idx : vIndices) {
                    newStorage.set(idx, op.apply(v1Values[idx], 1));
                }
            }
        } else if (v1.isSparse()) {
#else
        if (v1.isSparse()) {
#end
            if (v1.getSize() >= v2.getSize() && v2.getSize() <= Constant.sparseDenseStorageThreshold * v2.dim()) {
			  // sparse preferred, keep storage guaranteed
			  $itype.toLowerCase() [ ] v2Indices = v2.getIndices();
			  $itype.toLowerCase() size = v2.size();
			  for (int i=0; i < size; i++) {
				$itype.toLowerCase() idx = v2Indices[i];
				if (v1.hasKey(idx)) {
				  newStorage.set(idx, op.apply(v1.get(idx), 1));
				}
			  }
			} else if (v1.getSize() <= v2.getSize() && v1.getSize() <= Constant.sparseDenseStorageThreshold * v1.dim()){
			  // sparse preferred, keep storage guaranteed
			  ObjectIterator<${itype}2${dtype1}Map.Entry> iter = v1.getStorage().entryIterator();
			  while(iter.hasNext()) {
				${itype}2${dtype1}Map.Entry entry = iter.next();
				$itype.toLowerCase() idx = entry.get${itype}Key();
				if (v2.hasKey(idx)) {
				  newStorage.set(idx, op.apply(v1.get(idx), 1));
				}
			  }
			} else if (v1.getSize() > v2.getSize() && v2.getSize() > Constant.sparseDenseStorageThreshold * v2.dim()) {
			  // preferred dense
			  $itype.toLowerCase() [ ] v2Indices = v2.getIndices();
			  $itype.toLowerCase() size = v2.size();
			  for (int i=0; i < size; i++) {
				$itype.toLowerCase() idx = v2Indices[i];
				if (v1.hasKey(idx)) {
				  newStorage.set(idx, op.apply(v1.get(idx), 1));
				}
			  }
			} else { // preferred dense
			  ObjectIterator<${itype}2${dtype1}Map.Entry> iter = v1.getStorage().entryIterator();
			  while(iter.hasNext()) {
				${itype}2${dtype1}Map.Entry entry = iter.next();
				$itype.toLowerCase() idx = entry.get${itype}Key();
				if (v2.hasKey(idx)) {
				  newStorage.set(idx, op.apply(v1.get(idx), 1));
				}
			  }
			}
        } else { // sorted
            int v1Pointor = 0;
            int v2Pointor = 0;
            $itype.toLowerCase() size1 = v1.size();
            $itype.toLowerCase() size2 = v2.size();

            if (size1 >= size2 && size2 <= Constant.sortedDenseStorageThreshold * v2.dim()) {
			  if (op.isKeepStorage()) {
				$itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() [ ] v2Indices = v2.getIndices();
				$itype.toLowerCase() [ ] resIndices = ArrayCopy.copy(v2.getIndices());
				$dtype1.toLowerCase() [ ] resValues = newStorage.getValues();


				while (v1Pointor < size1 && v2Pointor < size2) {
				  if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
					resValues[v2Pointor] = op.apply(v1Values[v1Pointor], 1);
					v1Pointor++;
					v2Pointor++;
				  } else if (v2Indices[v2Pointor] < v1Indices[v1Pointor]) {
					v2Pointor++;
				  } else { // v2Indices[v2Pointor] > v1Indices[v1Pointor]
					v1Pointor++;
				  }
				}
				newStorage = new ${itype}${dtype1}SortedVectorStorage(v1.getDim(), (int)v2.size(), resIndices, resValues);
			  } else {
				$itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() [ ] v2Indices = v2.getIndices();

				while (v1Pointor < size1 && v2Pointor < size2) {
					if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
						newStorage.set(v1Indices[v1Pointor], op.apply(v1Values[v1Pointor], 1));
						v1Pointor++;
						v2Pointor++;
					} else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
						v1Pointor++;
					} else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
						v2Pointor++;
					}
				}
			  }
			} else if (size1 <= size2 && size1 <= Constant.sortedDenseStorageThreshold * v1.dim()) {
			  if (op.isKeepStorage()) {
				$itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() [ ] resIndices = ArrayCopy.copy(v1Indices);
				$dtype1.toLowerCase() [ ] resValues = newStorage.getValues();
				$itype.toLowerCase() [ ] v2Indices = v2.getIndices();

				while (v1Pointor < size1 && v2Pointor < size2) {
				  if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
					resValues[v1Pointor] = op.apply(v1Values[v1Pointor], 1);
					v1Pointor++;
					v2Pointor++;
				  } else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
					v1Pointor++;
				  } else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
					v2Pointor++;
				  }
				}
				newStorage = new ${itype}${dtype1}SortedVectorStorage(v1.getDim(), (int)v1.size(), resIndices, resValues);
			  } else {
				$itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() [ ] v2Indices = v2.getIndices();

				while (v1Pointor < size1 && v2Pointor < size2) {
					if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
						newStorage.set(v1Indices[v1Pointor], op.apply(v1Values[v1Pointor], 1));
						v1Pointor++;
						v2Pointor++;
					} else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
						v1Pointor++;
					} else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
						v2Pointor++;
					}
				}
			  }
			} else if (size1 > size2 && size2 > Constant.sortedDenseStorageThreshold * v2.dim()) {
			  if (op.isKeepStorage()) {
				$itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() [ ] v2Indices = v2.getIndices();
				$itype.toLowerCase() [ ] resIndices = ArrayCopy.copy(v2.getIndices());
				$dtype1.toLowerCase() [ ] resValues = newStorage.getValues();

				while (v1Pointor < size1 && v2Pointor < size2) {
				  if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
					resValues[v2Pointor] = op.apply(v1Values[v1Pointor], 1);
					v1Pointor++;
					v2Pointor++;
				  } else if (v2Indices[v2Pointor] < v1Indices[v1Pointor]) {
					v2Pointor++;
				  } else { // v2Indices[v2Pointor] > v1Indices[v1Pointor]
					v1Pointor++;
				  }
				}

				newStorage = new ${itype}${dtype1}SortedVectorStorage(v1.getDim(), (int)v2.size(), resIndices, resValues);
			  } else {//dense or sparse
				$itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() [ ] v2Indices = v2.getIndices();

				while (v1Pointor < size1 && v2Pointor < size2) {
					if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
						newStorage.set(v1Indices[v1Pointor], op.apply(v1Values[v1Pointor], 1));
						v1Pointor++;
						v2Pointor++;
					} else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
						v1Pointor++;
					} else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
						v2Pointor++;
					}
				}
			  }
			} else {
			  if (op.isKeepStorage()) {
				$itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() [ ] resIndices = ArrayCopy.copy(v1Indices);
				$dtype1.toLowerCase() [ ] resValues = newStorage.getValues();
				$itype.toLowerCase() [ ] v2Indices = v2.getIndices();


				while (v1Pointor < size1 && v2Pointor < size2) {
				  if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
					resValues[v1Pointor] = op.apply(v1Values[v1Pointor], 1);
					v1Pointor++;
					v2Pointor++;
				  } else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
					v1Pointor++;
				  } else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
					v2Pointor++;
				  }
				}
				newStorage = new ${itype}${dtype1}SortedVectorStorage(v1.getDim(), (int)v1.size(), resIndices, resValues);
			  } else {//dense or sparse
				$itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() [ ] v2Indices = v2.getIndices();

				while (v1Pointor < size1 && v2Pointor < size2) {
					if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
						newStorage.set(v1Indices[v1Pointor], op.apply(v1Values[v1Pointor], 1));
						v1Pointor++;
						v2Pointor++;
					} else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
						v1Pointor++;
					} else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
						v2Pointor++;
					}
				}
			  }
			}
		  }

        return  new ${itype}${dtype1}Vector(v1.getMatrixId(), v1.getRowId(), v1.getClock(), v1.getDim(), newStorage);
    }

#end
#end

}