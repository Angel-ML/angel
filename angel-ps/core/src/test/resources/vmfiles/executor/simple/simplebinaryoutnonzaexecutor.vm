/*
 * Tencent is pleased to support the open source community by making Angel available.
 *
 * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *
 */


#set ($len = $dtypes.size() - 1)
package com.tencent.angel.ml.math2.ufuncs.executor.simple;

import com.tencent.angel.exception.AngelException;
import com.tencent.angel.ml.math2.storage.*;
import com.tencent.angel.ml.math2.ufuncs.executor.StorageSwitch;
import com.tencent.angel.ml.math2.ufuncs.expression.Binary;
import com.tencent.angel.ml.math2.vector.*;
import it.unimi.dsi.fastutil.ints.*;
import it.unimi.dsi.fastutil.longs.*;
import it.unimi.dsi.fastutil.objects.ObjectIterator;
import com.tencent.angel.ml.math2.utils.Constant;


public class SimpleBinaryOutNonZAExecutor {
    public static Vector apply(Vector v1, Vector v2, Binary op) {
        if (v1 instanceof IntDoubleVector && v2 instanceof IntDoubleVector) {
            return apply((IntDoubleVector) v1, (IntDoubleVector) v2, op);
        } else if (v1 instanceof IntDoubleVector && v2 instanceof IntFloatVector) {
            return apply((IntDoubleVector) v1, (IntFloatVector) v2, op);
        } else if (v1 instanceof IntDoubleVector && v2 instanceof IntLongVector) {
            return apply((IntDoubleVector) v1, (IntLongVector) v2, op);
        } else if (v1 instanceof IntDoubleVector && v2 instanceof IntIntVector) {
            return apply((IntDoubleVector) v1, (IntIntVector) v2, op);
        } else if (v1 instanceof IntDoubleVector && v2 instanceof IntDummyVector) {
            return apply((IntDoubleVector) v1, (IntDummyVector) v2, op);
        } else if (v1 instanceof IntFloatVector && v2 instanceof IntFloatVector) {
            return apply((IntFloatVector) v1, (IntFloatVector) v2, op);
        } else if (v1 instanceof IntFloatVector && v2 instanceof IntLongVector) {
            return apply((IntFloatVector) v1, (IntLongVector) v2, op);
        } else if (v1 instanceof IntFloatVector && v2 instanceof IntIntVector) {
            return apply((IntFloatVector) v1, (IntIntVector) v2, op);
        } else if (v1 instanceof IntFloatVector && v2 instanceof IntDummyVector) {
            return apply((IntFloatVector) v1, (IntDummyVector) v2, op);
        } else if (v1 instanceof IntLongVector && v2 instanceof IntLongVector) {
            return apply((IntLongVector) v1, (IntLongVector) v2, op);
        } else if (v1 instanceof IntLongVector && v2 instanceof IntIntVector) {
            return apply((IntLongVector) v1, (IntIntVector) v2, op);
        } else if (v1 instanceof IntLongVector && v2 instanceof IntDummyVector) {
            return apply((IntLongVector) v1, (IntDummyVector) v2, op);
        } else if (v1 instanceof IntIntVector && v2 instanceof IntIntVector) {
            return apply((IntIntVector) v1, (IntIntVector) v2, op);
        } else if (v1 instanceof IntIntVector && v2 instanceof IntDummyVector) {
            return apply((IntIntVector) v1, (IntDummyVector) v2, op);
        } else if (v1 instanceof LongDoubleVector && v2 instanceof LongDoubleVector) {
            return apply((LongDoubleVector) v1, (LongDoubleVector) v2, op);
        } else if (v1 instanceof LongDoubleVector && v2 instanceof LongFloatVector) {
            return apply((LongDoubleVector) v1, (LongFloatVector) v2, op);
        } else if (v1 instanceof LongDoubleVector && v2 instanceof LongLongVector) {
            return apply((LongDoubleVector) v1, (LongLongVector) v2, op);
        } else if (v1 instanceof LongDoubleVector && v2 instanceof LongIntVector) {
            return apply((LongDoubleVector) v1, (LongIntVector) v2, op);
        } else if (v1 instanceof LongDoubleVector && v2 instanceof LongDummyVector) {
            return apply((LongDoubleVector) v1, (LongDummyVector) v2, op);
        } else if (v1 instanceof LongFloatVector && v2 instanceof LongFloatVector) {
            return apply((LongFloatVector) v1, (LongFloatVector) v2, op);
        } else if (v1 instanceof LongFloatVector && v2 instanceof LongLongVector) {
            return apply((LongFloatVector) v1, (LongLongVector) v2, op);
        } else if (v1 instanceof LongFloatVector && v2 instanceof LongIntVector) {
            return apply((LongFloatVector) v1, (LongIntVector) v2, op);
        } else if (v1 instanceof LongFloatVector && v2 instanceof LongDummyVector) {
            return apply((LongFloatVector) v1, (LongDummyVector) v2, op);
        } else if (v1 instanceof LongLongVector && v2 instanceof LongLongVector) {
            return apply((LongLongVector) v1, (LongLongVector) v2, op);
        } else if (v1 instanceof LongLongVector && v2 instanceof LongIntVector) {
            return apply((LongLongVector) v1, (LongIntVector) v2, op);
        } else if (v1 instanceof LongLongVector && v2 instanceof LongDummyVector) {
            return apply((LongLongVector) v1, (LongDummyVector) v2, op);
        } else if (v1 instanceof LongIntVector && v2 instanceof LongIntVector) {
            return apply((LongIntVector) v1, (LongIntVector) v2, op);
        } else if (v1 instanceof LongIntVector && v2 instanceof LongDummyVector) {
            return apply((LongIntVector) v1, (LongDummyVector) v2, op);
        } else {
            throw new AngelException("Vector type is not support!");
        }
    }

#foreach ($itype in $itypes)
#foreach ($idx1 in [0..$len])
#set ($dtype1 = $dtypes.get($idx1))
#foreach ($idx2 in [$idx1..$len])
#set ($dtype2 = $dtypes.get($idx2))
    public static Vector apply(${itype}${dtype1}Vector v1, ${itype}${dtype2}Vector v2, Binary op) {
        ${itype}${dtype1}VectorStorage newStorage = (${itype}${dtype1}VectorStorage)StorageSwitch.apply(v1, v2, op);
#if (${itype} == "Int")
        if (v1.isDense() && v2.isDense()) {
            $dtype1.toLowerCase() [] resValues = newStorage.getValues();
            $dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
            $dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();
            for ($itype.toLowerCase() idx = 0; idx < resValues.length; idx++) {
                resValues[idx] = op.apply(v1Values[idx], v2Values[idx]);
            }
        } else if (v1.isDense() && v2.isSparse()) {
            $dtype1.toLowerCase() [ ] resValues = newStorage.getValues();
            $dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
            ObjectIterator<${itype}2${dtype2}Map.Entry> iter = v2.getStorage().entryIterator();
            while(iter.hasNext()) {
                ${itype}2${dtype2}Map.Entry entry = iter.next();
                $itype.toLowerCase() idx = entry.get${itype}Key();
                resValues[idx] = op.apply(v1Values[idx], entry.get${dtype2}Value());
            }
        } else if (v1.isDense() && v2.isSorted()) {
            $dtype1.toLowerCase() [] resValues = newStorage.getValues();
            $dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
            $itype.toLowerCase() [] v2Indices = v2.getStorage().getIndices();
            $dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();
            $itype.toLowerCase() size = v2.size();
            for ($itype.toLowerCase() i=0; i < size; i++) {
                $itype.toLowerCase() idx = v2Indices[i];
                resValues[idx] = op.apply(v1Values[idx], v2Values[i]);
            }
        } else if (v1.isSparse() && v2.isDense()) {
            if (op.isKeepStorage()) {
                $itype.toLowerCase() dim = v1.getDim();
				$dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();

				if (v1.size() < Constant.denseLoopThreshold * v1.getDim()) {
				  for (int i = 0; i < dim; i++) {
					newStorage.set(i, op.apply(0, v2Values[i]));
				  }
				  ObjectIterator<${itype}2${dtype1}Map.Entry> iter = v1.getStorage().entryIterator();
				  while (iter.hasNext()) {
					${itype}2${dtype1}Map.Entry entry = iter.next();
					$itype.toLowerCase() idx = entry.get${itype}Key();
					newStorage.set(idx, op.apply(entry.get${dtype1}Value(), v2Values[idx]));
				  }
				} else {
				  for (int i = 0; i < dim; i++) {
					if (v1.getStorage().hasKey(i)) {
					  newStorage.set(i, op.apply(v1.get(i), v2Values[i]));
					} else {
					  newStorage.set(i, op.apply(0, v2Values[i]));
					}
				  }
				}
            } else {
                $dtype1.toLowerCase() [ ] resValues = newStorage.getValues();
                $dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();

                if (v1.size() < Constant.denseLoopThreshold * v1.getDim()) {
                    for ($itype.toLowerCase() i = 0; i < resValues.length; i++) {
                        resValues[i] = op.apply(0, v2Values[i]);
                    }
                    ObjectIterator<${itype}2${dtype1}Map.Entry> iter = v1.getStorage().entryIterator();
                    while (iter.hasNext()) {
                        ${itype}2${dtype1}Map.Entry entry = iter.next();
                        $itype.toLowerCase() idx = entry.get${itype}Key();
                        resValues[idx] = op.apply(entry.get${dtype1}Value(), v2Values[idx]);
                    }
                } else {
                    for ($itype.toLowerCase() i = 0; i < resValues.length; i++) {
                        if (v1.getStorage().hasKey(i)) {
                            resValues[i] = op.apply(v1.get(i), v2Values[i]);
                        } else {
                            resValues[i] = op.apply(0, v2Values[i]);
                        }
                    }
                }
            }
        } else if (v1.isSorted() && v2.isDense()) {
            if (op.isKeepStorage()) {
                $itype.toLowerCase() dim = v1.getDim();
				$itype.toLowerCase() [] resIndices = newStorage.getIndices();
				$dtype1.toLowerCase() [] resValues = newStorage.getValues();
				$dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();

				$itype.toLowerCase() [] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
				for (int i = 0; i < dim; i++) {
				  resIndices[i] = i;
				  resValues[i] = op.apply(0, v2Values[i]);
				}

				$itype.toLowerCase() size = v1.size();
				for (int i = 0; i < size; i++) {
				  $itype.toLowerCase() idx = v1Indices[i];
				  resValues[idx] = op.apply(v1Values[i], v2Values[idx]);
				}
            } else {
                $dtype1.toLowerCase() [ ] resValues = newStorage.getValues();
                $dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();

                if (v1.size() < Constant.denseLoopThreshold * v1.getDim()) {
                    $itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
                    $dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
                    for ($itype.toLowerCase() i = 0; i < resValues.length; i++) {
                        resValues[i] = op.apply(0, v2Values[i]);
                    }

                    $itype.toLowerCase() size = v1.size();
                    for ($itype.toLowerCase() i = 0; i < size; i++) {
                        $itype.toLowerCase() idx = v1Indices[i];
                        resValues[idx] = op.apply(v1Values[i], v2Values[idx]);
                    }
                } else {
                    ${itype}${dtype1}VectorStorage v1Storage = v1.getStorage();
                    for ($itype.toLowerCase() i = 0; i < resValues.length; i++) {
                        if (v1Storage.hasKey(i)) {
                            resValues[i] = op.apply(v1.get(i), v2Values[i]);
                        } else {
                            resValues[i] = op.apply(0, v2Values[i]);
                        }
                    }
                }
            }
        } else if (v1.isSparse() && v2.isSparse()) {
#else
        if (v1.isSparse() && v2.isSparse()) {
#end
			$itype.toLowerCase() v1Size = v1.size();
			$itype.toLowerCase() v2Size = v2.size();
			if (v1Size >= v2Size * Constant.sparseThreshold &&
            	(v1Size + v2Size) * Constant.intersectionCoeff <= Constant.sparseDenseStorageThreshold * v1.dim()) {
			  // we gauss the indices of v2 maybe is a subset of v1, or overlap is very large
			  ObjectIterator<${itype}2${dtype2}Map.Entry> iter = v2.getStorage().entryIterator();
			  while (iter.hasNext()) {
				${itype}2${dtype2}Map.Entry entry = iter.next();
				$itype.toLowerCase() idx = entry.get${itype}Key();
				newStorage.set(idx, op.apply(v1.get(idx), entry.get${dtype2}Value()));
			  }
			} else if ((v1Size + v2Size) * Constant.intersectionCoeff >= Constant.sparseDenseStorageThreshold * v1.dim()) {
			  // we gauss dense storage is more efficient
			  ObjectIterator<${itype}2${dtype1}Map.Entry> iter1 = v1.getStorage().entryIterator();
			  while (iter1.hasNext()) {
				${itype}2${dtype1}Map.Entry entry = iter1.next();
				$itype.toLowerCase() idx = entry.get${itype}Key();
				newStorage.set(idx, entry.get${dtype1}Value());
			  }

			  ObjectIterator<${itype}2${dtype2}Map.Entry> iter2 = v2.getStorage().entryIterator();
			  while (iter2.hasNext()) {
				${itype}2${dtype2}Map.Entry entry = iter2.next();
				$itype.toLowerCase() idx = entry.get${itype}Key();
				newStorage.set(idx, op.apply(v1.get(idx), entry.get${dtype2}Value()));
			  }
			} else {
			  // to avoid multi-rehash
			  int capacity = 1 << (32 - Integer.numberOfLeadingZeros((int) (v1.size() / 0.75)));
			  if (v1.size() + v2.size() <= 1.5 * capacity) {
				// no rehashor one onle rehash is required, nothing to optimization
				ObjectIterator<${itype}2${dtype2}Map.Entry> iter = v2.getStorage().entryIterator();
				while (iter.hasNext()) {
				  ${itype}2${dtype2}Map.Entry entry = iter.next();
				  $itype.toLowerCase() idx = entry.get${itype}Key();
				  newStorage.set(idx, op.apply(v1.get(idx), entry.get${dtype2}Value()));
				}
			  } else {
				// multi-rehash
				ObjectIterator<${itype}2${dtype1}Map.Entry> iter1 = v1.getStorage().entryIterator();
				while (iter1.hasNext()) {
				  ${itype}2${dtype1}Map.Entry entry = iter1.next();
				  $itype.toLowerCase() idx = entry.get${itype}Key();
				  newStorage.set(idx, entry.get${dtype1}Value());
				}

				ObjectIterator<${itype}2${dtype2}Map.Entry> iter2 = v2.getStorage().entryIterator();
				while (iter2.hasNext()) {
				  ${itype}2${dtype2}Map.Entry entry = iter2.next();
				  $itype.toLowerCase() idx = entry.get${itype}Key();
				  newStorage.set(idx, op.apply(v1.get(idx), entry.get${dtype2}Value()));
				}
			  }
			}
        } else if (v1.isSparse() && v2.isSorted()) {
			$itype.toLowerCase() v1Size = v1.size();
			$itype.toLowerCase() v2Size = v2.size();

			if (v1Size >= v2Size * Constant.sparseThreshold &&
					(v1Size + v2Size) * Constant.intersectionCoeff <= Constant.sparseDenseStorageThreshold * v1.dim()) {
			  // we gauss the indices of v2 maybe is a subset of v1, or overlap is very large
			  $itype.toLowerCase() [] v2Indices = v2.getStorage().getIndices();
			  $dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();
			  for (int i = 0; i < v2.size(); i++) {
				$itype.toLowerCase() idx = v2Indices[i];
				newStorage.set(idx, op.apply(v1.get(idx), v2Values[i]));
			  }
			}else if ((v1Size + v2Size) * Constant.intersectionCoeff >= Constant.sparseDenseStorageThreshold * v1.dim()) {
			  ObjectIterator<${itype}2${dtype1}Map.Entry> iter1 = v1.getStorage().entryIterator();
			  while (iter1.hasNext()) {
				${itype}2${dtype1}Map.Entry entry = iter1.next();
				$itype.toLowerCase() idx = entry.get${itype}Key();
				newStorage.set(idx, entry.get${dtype1}Value());
			  }

			  $itype.toLowerCase() [] v2Indices = v2.getStorage().getIndices();
			  $dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();
			  $itype.toLowerCase() size = v2.size();
			  for (int i = 0; i < size; i++) {
				$itype.toLowerCase() idx = v2Indices[i];
				newStorage.set(idx, op.apply(v1.get(idx), v2Values[i]));
			  }
			} else {
			  // to avoid multi-rehash
			  int capacity = 1 << (32 - Integer.numberOfLeadingZeros((int) (v1.size() / 0.75)));
			  if (v1.size() + v2.size() <= 1.5 * capacity) {
				$itype.toLowerCase() [] v2Indices = v2.getStorage().getIndices();
				$dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();
				for (int i = 0; i < v2.size(); i++) {
				  $itype.toLowerCase() idx = v2Indices[i];
				  newStorage.set(idx, op.apply(v1.get(idx), v2Values[i]));
				}
			  } else {
				ObjectIterator<${itype}2${dtype1}Map.Entry> iter1 = v1.getStorage().entryIterator();
				while (iter1.hasNext()) {
				  ${itype}2${dtype1}Map.Entry entry = iter1.next();
				  $itype.toLowerCase() idx = entry.get${itype}Key();
				  newStorage.set(idx, entry.get${dtype1}Value());
				}

				$itype.toLowerCase() [] v2Indices = v2.getStorage().getIndices();
				$dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();
				$itype.toLowerCase() size = v2.size();
				for (int i = 0; i < size; i++) {
				  $itype.toLowerCase() idx = v2Indices[i];
				  newStorage.set(idx, op.apply(v1.get(idx), v2Values[i]));
				}
			  }
			}

        } else if (v1.isSorted() && v2.isSparse()) {
			$itype.toLowerCase() v1Size = v1.size();
			$itype.toLowerCase() v2Size = v2.size();

			if ((v1Size + v2Size) * Constant.intersectionCoeff >= Constant.sortedDenseStorageThreshold * v1.dim()){
			  if (op.isKeepStorage()){
				$itype.toLowerCase() [] v1Indices = v1.getStorage().getIndices();
				$itype.toLowerCase() [] idxiter = v2.getStorage().indexIterator().to${itype}Array();

				$itype.toLowerCase() [] indices = new $itype.toLowerCase() [(int)(v1Size + v2Size)];
				System.arraycopy(v1Indices, 0, indices, 0, (int) v1.size());
				System.arraycopy(idxiter, 0, indices, (int) v1.size(), (int) v2.size());

				${itype}AVLTreeSet avl = new ${itype}AVLTreeSet(indices);

				${itype}BidirectionalIterator iter = avl.iterator();
				$dtype1.toLowerCase() [] values = new $dtype1.toLowerCase() [indices.length];

				int i = 0;
				while (iter.hasNext()) {
				  $itype.toLowerCase() idx = iter.next${itype}();
				  indices[i] = idx;
				  values[i] = op.apply(v1.get(idx), v2.get(idx));
				  i++;
				}

				while (i < indices.length) {
				  indices[i] = 0;
				  i++;
				}

				newStorage = new ${itype}${dtype1}SortedVectorStorage(v1.getDim(), (int) avl.size(), indices, values);
			  }else{
				$itype.toLowerCase() [] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() size = v1.size();
				for (int i = 0; i < size; i++) {
				  $itype.toLowerCase() idx = v1Indices[i];
				  newStorage.set(idx, v1Values[i]);
				}

				ObjectIterator<${itype}2${dtype2}Map.Entry> iter = v2.getStorage().entryIterator();
				while (iter.hasNext()) {
				  ${itype}2${dtype2}Map.Entry entry = iter.next();
				  $itype.toLowerCase() idx = entry.get${itype}Key();
				  newStorage.set(idx, op.apply(newStorage.get(idx), entry.get${dtype2}Value()));
				}
			  }
			}else {
			  if (op.isKeepStorage()){
				$itype.toLowerCase() [] v1Indices = v1.getStorage().getIndices();
				$itype.toLowerCase() [] idxiter = v2.getStorage().indexIterator().to${itype}Array();

				$itype.toLowerCase() [] indices =new $itype.toLowerCase() [(int)(v1Size + v2Size)];
				System.arraycopy(v1Indices, 0, indices, 0, (int) v1.size());
				System.arraycopy(idxiter, 0, indices, (int) v1.size(), (int) v2.size());

				${itype}AVLTreeSet avl = new ${itype}AVLTreeSet(indices);

				${itype}BidirectionalIterator iter = avl.iterator();
				$dtype1.toLowerCase() [] values = new $dtype1.toLowerCase() [indices.length];

				int i = 0;
				while (iter.hasNext()) {
				  $itype.toLowerCase() idx = iter.next${itype}();
				  indices[i] = idx;
				  values[i] = op.apply(v1.get(idx), v2.get(idx));
				  i++;
				}

				while (i < indices.length) {
				  indices[i] = 0;
				  i++;
				}

				newStorage = new ${itype}${dtype1}SortedVectorStorage(v1.getDim(), (int) avl.size(), indices, values);
			  }else{
				$itype.toLowerCase() [] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() size = v1.size();
				for (int i = 0; i < size; i++) {
				  $itype.toLowerCase() idx = v1Indices[i];
				  newStorage.set(idx, v1Values[i]);
				}

				ObjectIterator<${itype}2${dtype2}Map.Entry> iter = v2.getStorage().entryIterator();
				while (iter.hasNext()) {
				  ${itype}2${dtype2}Map.Entry entry = iter.next();
				  $itype.toLowerCase() idx = entry.get${itype}Key();
				  newStorage.set(idx, op.apply(newStorage.get(idx), entry.get${dtype2}Value()));
				}
			  }
			}
        } else if (v1.isSorted() && v2.isSorted()) {
            int v1Pointor = 0;
            int v2Pointor = 0;
            $itype.toLowerCase() size1 = v1.size();
            $itype.toLowerCase() size2 = v2.size();

            $itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
            $dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
            $itype.toLowerCase() [ ] v2Indices = v2.getStorage().getIndices();
            $dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();
			if ((size1 + size2) * Constant.intersectionCoeff >= Constant.sortedDenseStorageThreshold * v1.dim()) {
			  if (op.isKeepStorage()){//sorted
				$itype.toLowerCase() [] resIndices = newStorage.getIndices();
				$dtype1.toLowerCase() [] resValues = newStorage.getValues();
				int global = 0;

				while (v1Pointor < size1 && v2Pointor < size2) {
				  if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
					resIndices[global] = v1Indices[v1Pointor];
					resValues[global] = op.apply(v1Values[v1Pointor], v2Values[v2Pointor]);
					global++;
					v1Pointor++;
					v2Pointor++;
				  } else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
					resIndices[global] = v1Indices[v1Pointor];
					resValues[global] = v1Values[v1Pointor];
					global++;
					v1Pointor++;
				  } else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
					resIndices[global] = v2Indices[v2Pointor];
					resValues[global] = op.apply(0, v2Values[v2Pointor]);
					global++;
					v2Pointor++;
				  }
				}
			  } else {//dense
				while (v1Pointor < size1 && v2Pointor < size2) {
				  if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
					newStorage.set(v1Indices[v1Pointor], op.apply(v1Values[v1Pointor], v2Values[v2Pointor]));
					v1Pointor++;
					v2Pointor++;
				  } else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
				  	newStorage.set(v1Indices[v1Pointor], v1Values[v1Pointor]);
					v1Pointor++;
				  } else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
				  	newStorage.set(v2Indices[v2Pointor], op.apply(0, v2Values[v2Pointor]));
					v2Pointor++;
				  }
				}
			  }
			} else {
			  if (op.isKeepStorage()){
				$itype.toLowerCase() [] resIndices = newStorage.getIndices();
				$dtype1.toLowerCase() [] resValues = newStorage.getValues();
				int globalPointor = 0;

				while (v1Pointor < size1 && v2Pointor < size2) {
				  if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
					resIndices[globalPointor] = v1Indices[v1Pointor];
					resValues[globalPointor] = op.apply(v1Values[v1Pointor], v2Values[v2Pointor]);
					v1Pointor++;
					v2Pointor++;
					globalPointor++;
				  } else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
					resIndices[globalPointor] = v1Indices[v1Pointor];
					resValues[globalPointor] = v1Values[v1Pointor];
					v1Pointor++;
					globalPointor++;
				  } else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
					resIndices[globalPointor] = v2Indices[v2Pointor];
					resValues[globalPointor] = op.apply(0, v2Values[v2Pointor]);
					v2Pointor++;
					globalPointor++;
				  }
				}
			  }else {
				while (v1Pointor < size1 && v2Pointor < size2) {
				  if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
					newStorage.set(v1Indices[v1Pointor], op.apply(v1Values[v1Pointor], v2Values[v2Pointor]));
					v1Pointor++;
					v2Pointor++;
				  } else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
					newStorage.set(v1Indices[v1Pointor], v1Values[v1Pointor]);
					v1Pointor++;
				  } else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
					newStorage.set( v2Indices[v2Pointor], op.apply(0, v2Values[v2Pointor]));
					v2Pointor++;
				  }
				}
			  }
			}
        } else {
            throw new AngelException("The operation is not support!");
        }

        return new ${itype}${dtype1}Vector(v1.getMatrixId(), v1.getRowId(), v1.getClock(), v1.getDim(), newStorage);
    }

#end
#end
#end


#foreach (${itype} in ${itypes})
#foreach (${dtype1} in ${dtypes})
    public static Vector apply(${itype}${dtype1}Vector v1, ${itype}DummyVector v2, Binary op) {
        ${itype}${dtype1}VectorStorage newStorage = (${itype}${dtype1}VectorStorage)StorageSwitch.apply(v1, v2, op);

#if (${itype} == "Int")
        if (v1.isDense()) {
            $dtype1.toLowerCase() [] resValues = newStorage.getValues();
            $itype.toLowerCase() [] v2Indices = v2.getIndices();
            for($itype.toLowerCase() idx: v2Indices) {
                resValues[idx] = op.apply(resValues[idx], 1);
            }
        } else if (v1.isSparse()) {
#else
        if (v1.isSparse()) {
#end
            $itype.toLowerCase() [] v2Indices = v2.getIndices();
            if (((v1.size() + v2.size()) * Constant.intersectionCoeff
            	> Constant.sparseDenseStorageThreshold * v1.getDim())) {
                $dtype1.toLowerCase() [] resValues = newStorage.getValues();

                ObjectIterator<${itype}2${dtype1}Map.Entry> iter = v1.getStorage().entryIterator();
                while(iter.hasNext()){
                    ${itype}2${dtype1}Map.Entry entry = iter.next();
                    newStorage.set(entry.get${itype}Key(), entry.get${dtype1}Value());
                }

                for($itype.toLowerCase() idx: v2Indices) {
                    newStorage.set(idx, op.apply(v1.get(idx), 1));
                }

            } else {
                // to avoid multi-rehash
                int capacity = 1 << (32 - Integer.numberOfLeadingZeros((int) (v1.size() / 0.75)));
                if (v1.size() + v2.size() < 1.5 * capacity) {
                    $itype.toLowerCase() size = v2.size();
                    for (int i = 0; i < size; i++) {
                        $itype.toLowerCase() idx = v2Indices[i];
                        newStorage.set(idx, op.apply(v1.get(idx), 1));
                    }
                } else {
                    ObjectIterator<${itype}2${dtype1}Map.Entry> iter1 = v1.getStorage().entryIterator();
                    while(iter1.hasNext()) {
                        ${itype}2${dtype1}Map.Entry entry = iter1.next();
                        $itype.toLowerCase() idx = entry.get${itype}Key();
                        newStorage.set(idx, entry.get${dtype1}Value());
                    }

                    $itype.toLowerCase() size = v2.size();
                    for (int i = 0; i < size; i++) {
                        $itype.toLowerCase() idx = v2Indices[i];
                        newStorage.set(idx, op.apply(v1.get(idx), 1));
                    }
                }
           }
        } else { // sorted
            $itype.toLowerCase() [] v1Indices = v1.getStorage().getIndices();
            $itype.toLowerCase() [] v2Indices = v2.getIndices();
            if (!op.isKeepStorage() && ((v1.size() + v2.size()) * Constant.intersectionCoeff
            	> Constant.sortedDenseStorageThreshold * v1.getDim())) {
                $dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();

                $itype.toLowerCase() size = v1.size();
                for(int i=0; i < size; i++){
                    newStorage.set(v1Indices[i], v1Values[i]);
                }

                size = v2.size();
                for (int i = 0; i < size; i++) {
                    $itype.toLowerCase() idx = v2Indices[i];
                    newStorage.set(idx, op.apply(newStorage.get(idx), 1));
                }

            } else {
                int v1Pointor = 0;
				int v2Pointor = 0;
				$itype.toLowerCase() size1 = v1.size();
				$itype.toLowerCase() size2 = v2.size();
				$dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
			    while (v1Pointor < size1 && v2Pointor < size2) {
				  if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
					newStorage.set(v1Indices[v1Pointor], op.apply(v1Values[v1Pointor], 1));
					v1Pointor++;
					v2Pointor++;
				  } else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
					newStorage.set(v1Indices[v1Pointor], v1Values[v1Pointor]);
					v1Pointor++;
				  } else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
					newStorage.set( v2Indices[v2Pointor], op.apply(0, 1));
					v2Pointor++;
				  }
				}
            }
        }

        return  new ${itype}${dtype1}Vector(v1.getMatrixId(), v1.getRowId(), v1.getClock(), v1.getDim(), newStorage);
    }
#end
#end
}