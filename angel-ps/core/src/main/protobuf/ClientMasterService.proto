/*
 * Tencent is pleased to support the open source community by making Angel available.
 *
 * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

option java_package = "com.tencent.angel.protobuf.generated";

option java_outer_classname = "ClientMasterServiceProtos";

option java_generate_equals_and_hash = true;

option java_generic_services = true;

option optimize_for = SPEED;

import "ML.proto";

message CounterProto {
  optional string name = 1;
  optional string displayName = 2;
  optional int64 value = 3;
}

message StringCounterMapProto {
  optional string key = 1;
  optional CounterProto value = 2;
}

message CounterGroupProto {
  optional string name = 1;
  optional string displayName = 2;
  repeated StringCounterMapProto counters = 3;
}

enum JobStateProto {
  J_NEW = 1;
  J_INITED = 2;
  J_RUNNING = 3;
  J_EXECUTE_SUCCESSED = 4;
  J_COMMITTING = 5;
  J_SUCCEEDED = 6;
  J_FAILED = 7;
  J_KILLED = 8;
}

message GetJobReportRequest{
  optional string appId = 1;
}
 
message JobReportProto {
  optional string appId = 1;
  optional JobStateProto jobState = 2;
  optional int32 curIteration = 3;
  optional int32 totalIteration = 4;
  optional float loss = 5;
  optional float success = 6;
  optional int64 startTime = 7;
  optional int64 finishTime = 8;
  optional string user = 9;
  optional string jobName = 10;
  optional string trackingUrl = 11;
  optional string diagnostics = 12;
  optional int64 submitTime = 13;
  repeated Pair metrics = 14;
}

message GetJobReportResponse{
  optional JobReportProto jobReport = 1;
}

message CreateMatricesRequest{
  repeated MatrixProto matrices = 1;
}

message CreateMatricesResponse{

}

message PingRequest {

}

message PingResponse {

}

message StartRequest {

}

message StartResponse {

}

message SaveRequest {
  repeated string matrixNames = 2;
}

message SaveResponse {

}

message CheckMatricesCreatedRequest {
  repeated string matrixNames = 1;
}

message CheckMatricesCreatedResponse {
  repeated MatrixStatus status = 1;
}

message SetParamsRequest {
  repeated Pair kvs = 1;
}

message SetParamsResponse {

}

message GetWorkerLogDirRequest{
  required WorkerIdProto workerId = 1;
}

message GetWorkerLogDirResponse{
  required string logDir = 1;
}

message StopRequest{
  required int32 exitStatus = 1;
}

message StopResponse{

}

service ClientMasterService {
  rpc start(StartRequest) returns (StartResponse);
  rpc save(SaveRequest) returns (SaveResponse);
  rpc stop(StopRequest) returns (StopResponse);
  rpc ping(PingRequest) returns (PingResponse);
  rpc getJobReport(GetJobReportRequest) returns (GetJobReportResponse);
  rpc getWorkerLogDir(GetWorkerLogDirRequest) returns (GetWorkerLogDirResponse);
  rpc createMatrices(CreateMatricesRequest) returns (CreateMatricesResponse);
  rpc getAllPSLocation(GetAllPSLocationRequest) returns (GetAllPSLocationResponse);
  rpc getAllPSAgentLocation(GetAllPSAgentLocationRequest) returns (GetAllPSAgentLocationResponse);
  rpc createMatrix(CreateMatrixRequest) returns (CreateMatrixResponse);
  rpc getMatrixInfo(GetMatrixInfoRequest) returns (GetMatrixInfoResponse);
  rpc releaseMatrix(ReleaseMatrixRequest) returns (ReleaseMatrixResponse);
  rpc checkMatricesCreated(CheckMatricesCreatedRequest) returns (CheckMatricesCreatedResponse);
  rpc setParams(SetParamsRequest) returns (SetParamsResponse);
}
