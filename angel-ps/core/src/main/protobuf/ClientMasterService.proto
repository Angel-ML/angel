/*
 * Tencent is pleased to support the open source community by making Angel available.
 *
 * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

option java_package = "com.tencent.angel.protobuf.generated";

option java_outer_classname = "ClientMasterServiceProtos";

option java_generate_equals_and_hash = true;

option java_generic_services = true;

option optimize_for = SPEED;

import "ML.proto";

message CounterProto {
  optional string name = 1;
  optional string displayName = 2;
  optional int64 value = 3;
}

message StringCounterMapProto {
  optional string key = 1;
  optional CounterProto value = 2;
}

message CounterGroupProto {
  optional string name = 1;
  optional string displayName = 2;
  repeated StringCounterMapProto counters = 3;
}

enum JobStateProto {
  J_NEW = 1;
  J_INITED = 2;
  J_PREPARE_WORKERS = 3;
  J_RUNNING = 4;
  J_EXECUTE_SUCCESSED = 5;
  J_COMMITTING = 6;
  J_SUCCEEDED = 7;
  J_FAILED = 8;
  J_KILLED = 9;
}

message GetJobReportRequest{
  optional string appId = 1;
}
 
message JobReportProto {
  optional string appId = 1;
  optional JobStateProto jobState = 2;
  optional int32 curIteration = 3;
  optional int32 totalIteration = 4;
  optional float loss = 5;
  optional float success = 6;
  optional int64 startTime = 7;
  optional int64 finishTime = 8;
  optional string user = 9;
  optional string jobName = 10;
  optional string trackingUrl = 11;
  optional string diagnostics = 12;
  optional int64 submitTime = 13;
  repeated Pair metrics = 14;
}

message GetJobReportResponse{
  optional JobReportProto jobReport = 1;
}

message PingRequest {

}

message PingResponse {

}

message StartRequest {

}

message StartResponse {

}

message SaveRequest {
  required ModelSaveContextProto saveContext = 1;
}

message MatrixSaveContextProto {
  required string matrixName = 1;
  required string formatClassName = 2;
  repeated int32 rowIndexes = 3;
  repeated Pair params = 4;
}

message ModelSaveContextProto {
  required string savePath = 1;
  required bool checkpint = 2;
  repeated MatrixSaveContextProto matrixContextes = 3;
}

message SaveResponse {
  required int32 requestId = 1;
}

message LoadRequest {
  required ModelLoadContextProto loadContext = 1;
}

message MatrixLoadContextProto {
  required string matrixName = 1;
}

message ModelLoadContextProto {
  required string loadPath = 1;
  repeated MatrixLoadContextProto matrixContextes = 2;
}

message LoadResponse {
  required int32 requestId = 1;
}

message SetParamsRequest {
  repeated Pair kvs = 1;
}

message SetParamsResponse {

}

message GetWorkerLogDirRequest{
  required WorkerIdProto workerId = 1;
}

message GetWorkerLogDirResponse{
  required string logDir = 1;
}

message StopRequest{
  required int32 exitStatus = 1;
}

message StopResponse{

}

message GetClientIdRequest {

}

message GetClientIdResponse {
  required int32 clientId = 1;
}

message KeepAliveRequest {
  required int32 clientId = 1;
}

message KeepAliveResponse {

}

message ClientRegisterRequest {
  required int32 clientId = 1;
}

message ClientRegisterResponse {

}

message CheckModelSavedRequest {
  required int32 requestId = 1;
}

message CheckModelSavedResponse {
  required int32 status = 1;
  optional string log = 2;
}

message CheckModelLoadedRequest {
  required int32 requestId = 1;
}

message CheckModelLoadedResponse {
  required int32 status = 1;
  optional string log = 2;
}

message KillPSRequest {
  required int32 psId = 1;
  required int32 attemptIndex = 2;
}

message KillPSResponse {

}

service ClientMasterService {
  rpc start(StartRequest) returns (StartResponse);
  rpc getAllPSLocation(GetAllPSLocationRequest) returns (GetAllPSLocationResponse);
  rpc save(SaveRequest) returns (SaveResponse);
  rpc load(LoadRequest) returns (LoadResponse);
  rpc stop(StopRequest) returns (StopResponse);
  rpc ping(PingRequest) returns (PingResponse);
  rpc getJobReport(GetJobReportRequest) returns (GetJobReportResponse);
  rpc getWorkerLogDir(GetWorkerLogDirRequest) returns (GetWorkerLogDirResponse);
  rpc createMatrices(CreateMatricesRequest) returns (CreateMatricesResponse);
  rpc checkMatricesCreated(CheckMatricesCreatedRequest) returns (CheckMatricesCreatedResponse);
  rpc checkModelSaved(CheckModelSavedRequest) returns (CheckModelSavedResponse);
  rpc checkModelLoaded(CheckModelLoadedRequest) returns (CheckModelLoadedResponse);
  rpc setParams(SetParamsRequest) returns (SetParamsResponse);
  rpc getClientId(GetClientIdRequest) returns (GetClientIdResponse);
  rpc keepAlive(KeepAliveRequest) returns (KeepAliveResponse);
  rpc clientRegister(ClientRegisterRequest) returns (ClientRegisterResponse);
  rpc killPS(KillPSRequest) returns (KillPSResponse);
}
