/*
 * Tencent is pleased to support the open source community by making Angel available.
 *
 * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *
 */


#set ($len = $dtypes.size() - 1)
package com.tencent.angel.ml.math2.ufuncs.executor.simple;

import com.tencent.angel.exception.AngelException;
import com.tencent.angel.ml.math2.storage.*;
import com.tencent.angel.ml.math2.ufuncs.executor.StorageSwitch;
import com.tencent.angel.ml.math2.ufuncs.expression.Binary;
import com.tencent.angel.ml.math2.vector.*;
import it.unimi.dsi.fastutil.ints.*;
import it.unimi.dsi.fastutil.longs.*;
import it.unimi.dsi.fastutil.objects.ObjectIterator;
import com.tencent.angel.ml.math2.utils.Constant;


public class SimpleBinaryInAllExecutor {
    public static Vector apply(Vector v1, Vector v2, Binary op) {
        if (v1 instanceof IntDoubleVector && v2 instanceof IntDoubleVector) {
            return apply((IntDoubleVector) v1, (IntDoubleVector) v2, op);
        } else if (v1 instanceof IntDoubleVector && v2 instanceof IntFloatVector) {
            return apply((IntDoubleVector) v1, (IntFloatVector) v2, op);
        } else if (v1 instanceof IntDoubleVector && v2 instanceof IntLongVector) {
            return apply((IntDoubleVector) v1, (IntLongVector) v2, op);
        } else if (v1 instanceof IntDoubleVector && v2 instanceof IntIntVector) {
            return apply((IntDoubleVector) v1, (IntIntVector) v2, op);
        } else if (v1 instanceof IntDoubleVector && v2 instanceof IntDummyVector) {
            return apply((IntDoubleVector) v1, (IntDummyVector) v2, op);
        } else if (v1 instanceof IntFloatVector && v2 instanceof IntFloatVector) {
            return apply((IntFloatVector) v1, (IntFloatVector) v2, op);
        } else if (v1 instanceof IntFloatVector && v2 instanceof IntLongVector) {
            return apply((IntFloatVector) v1, (IntLongVector) v2, op);
        } else if (v1 instanceof IntFloatVector && v2 instanceof IntIntVector) {
            return apply((IntFloatVector) v1, (IntIntVector) v2, op);
        } else if (v1 instanceof IntFloatVector && v2 instanceof IntDummyVector) {
            return apply((IntFloatVector) v1, (IntDummyVector) v2, op);
        } else if (v1 instanceof IntLongVector && v2 instanceof IntLongVector) {
            return apply((IntLongVector) v1, (IntLongVector) v2, op);
        } else if (v1 instanceof IntLongVector && v2 instanceof IntIntVector) {
            return apply((IntLongVector) v1, (IntIntVector) v2, op);
        } else if (v1 instanceof IntLongVector && v2 instanceof IntDummyVector) {
            return apply((IntLongVector) v1, (IntDummyVector) v2, op);
        } else if (v1 instanceof IntIntVector && v2 instanceof IntIntVector) {
            return apply((IntIntVector) v1, (IntIntVector) v2, op);
        } else if (v1 instanceof IntIntVector && v2 instanceof IntDummyVector) {
            return apply((IntIntVector) v1, (IntDummyVector) v2, op);
        } else if (v1 instanceof LongDoubleVector && v2 instanceof LongDoubleVector) {
            return apply((LongDoubleVector) v1, (LongDoubleVector) v2, op);
        } else if (v1 instanceof LongDoubleVector && v2 instanceof LongFloatVector) {
            return apply((LongDoubleVector) v1, (LongFloatVector) v2, op);
        } else if (v1 instanceof LongDoubleVector && v2 instanceof LongLongVector) {
            return apply((LongDoubleVector) v1, (LongLongVector) v2, op);
        } else if (v1 instanceof LongDoubleVector && v2 instanceof LongIntVector) {
            return apply((LongDoubleVector) v1, (LongIntVector) v2, op);
        } else if (v1 instanceof LongDoubleVector && v2 instanceof LongDummyVector) {
            return apply((LongDoubleVector) v1, (LongDummyVector) v2, op);
        } else if (v1 instanceof LongFloatVector && v2 instanceof LongFloatVector) {
            return apply((LongFloatVector) v1, (LongFloatVector) v2, op);
        } else if (v1 instanceof LongFloatVector && v2 instanceof LongLongVector) {
            return apply((LongFloatVector) v1, (LongLongVector) v2, op);
        } else if (v1 instanceof LongFloatVector && v2 instanceof LongIntVector) {
            return apply((LongFloatVector) v1, (LongIntVector) v2, op);
        } else if (v1 instanceof LongFloatVector && v2 instanceof LongDummyVector) {
            return apply((LongFloatVector) v1, (LongDummyVector) v2, op);
        } else if (v1 instanceof LongLongVector && v2 instanceof LongLongVector) {
            return apply((LongLongVector) v1, (LongLongVector) v2, op);
        } else if (v1 instanceof LongLongVector && v2 instanceof LongIntVector) {
            return apply((LongLongVector) v1, (LongIntVector) v2, op);
        } else if (v1 instanceof LongLongVector && v2 instanceof LongDummyVector) {
            return apply((LongLongVector) v1, (LongDummyVector) v2, op);
        } else if (v1 instanceof LongIntVector && v2 instanceof LongIntVector) {
            return apply((LongIntVector) v1, (LongIntVector) v2, op);
        } else if (v1 instanceof LongIntVector && v2 instanceof LongDummyVector) {
            return apply((LongIntVector) v1, (LongDummyVector) v2, op);
        } else {
            throw new AngelException("Vector type is not support!");
        }
    }

#foreach ($itype in $itypes)
#foreach ($idx1 in [0..$len])
#set ($dtype1 = $dtypes.get($idx1))
#foreach ($idx2 in [$idx1..$len])
#set ($dtype2 = $dtypes.get($idx2))
    public static Vector apply(${itype}${dtype1}Vector v1, ${itype}${dtype2}Vector v2, Binary op) {
    	${itype}${dtype1}VectorStorage newStorage = (${itype}${dtype1}VectorStorage) StorageSwitch.apply(v1, v2, op);
#if (${itype} == "Int")
        if (v1.isDense() && v2.isDense()) {
            $dtype1.toLowerCase() [] resValues = newStorage.getValues();
            $dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
            $dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();
            for ($itype.toLowerCase() idx = 0; idx < resValues.length; idx++) {
                resValues[idx] = op.apply(v1Values[idx], v2Values[idx]);
            }
        } else if (v1.isDense() && v2.isSparse()) {
            $dtype1.toLowerCase() [] resValues = newStorage.getValues();
             $dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
            if (v2.size() < Constant.denseLoopThreshold * v2.getDim()) {
                for (int i = 0; i < resValues.length; i++) {
                    resValues[i] = op.apply(v1Values[i], 0);
                }
                ObjectIterator<${itype}2${dtype2}Map.Entry> iter = v2.getStorage().entryIterator();
                while (iter.hasNext()) {
                    ${itype}2${dtype2}Map.Entry entry = iter.next();
                    $itype.toLowerCase() idx = entry.getIntKey();
                    resValues[idx] = op.apply(v1.get(idx), entry.get${dtype2}Value());
                }
            } else {
                ${itype}${dtype2}VectorStorage v2Storage = v2.getStorage();
                for (int i = 0; i < resValues.length; i++) {
                    if (v2Storage.hasKey(i)) {
                        resValues[i] = op.apply(v1Values[i], v2.get(i));
                    } else {
                        resValues[i] = op.apply(v1Values[i], 0);
                    }
                }
            }
        }else if (v1.isDense() && v2.isSorted()) {
            $dtype1.toLowerCase() [ ] resValues = newStorage.getValues();
            $dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
            if (v2.size() < Constant.denseLoopThreshold * v2.getDim()) {
                $itype.toLowerCase() [ ] v2Indices = v2.getStorage().getIndices();
                $dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();
                for (int i = 0; i < resValues.length; i++) {
                    resValues[i] = op.apply(v1Values[i], 0);
                }

                $itype.toLowerCase() size = v2.size();
                for (int i = 0; i < size; i++) {
                    $itype.toLowerCase() idx = v2Indices[i];
                    resValues[idx] = op.apply(v1.get(idx), v2Values[i]);
                }
            } else {
                ${itype}${dtype2}VectorStorage v2Storage = v2.getStorage();
                for (int i = 0; i < resValues.length; i++) {
                    if (v2Storage.hasKey(i)) {
                        resValues[i] = op.apply(v1Values[i], v2.get(i));
                    } else {
                        resValues[i] = op.apply(v1Values[i], 0);
                    }
                }
            }
        } else if (v1.isSparse() && v2.isDense()) {
            if (op.isKeepStorage()) {
                // multi-rehash
				${itype}${dtype1}VectorStorage v1Storage = v1.getStorage();
				$dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();
				for (int i = 0; i < v1.getDim(); i++) {
				  if (v1Storage.hasKey(i)) {
					newStorage.set(i, op.apply(v1.get(i),v2Values[i]));
				  } else {
					newStorage.set(i, op.apply(0, v2Values[i]));
				  }
				}
            } else {
                $dtype1.toLowerCase() [] resValues = newStorage.getValues();
                $dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();

                if (v1.size() < Constant.denseLoopThreshold * v1.getDim()) {
                    for (int i = 0; i < resValues.length; i++) {
                        resValues[i] = op.apply(0, v2Values[i]);
                    }
                    ObjectIterator<${itype}2${dtype1}Map.Entry> iter = v1.getStorage().entryIterator();
                    while (iter.hasNext()) {
                        ${itype}2${dtype1}Map.Entry entry = iter.next();
                        $itype.toLowerCase() idx = entry.getIntKey();
                        resValues[idx] = op.apply(entry.get${dtype1}Value(), v2Values[idx]);
                    }
                } else {
                    for (int i = 0; i < resValues.length; i++) {
                        if (v1.getStorage().hasKey(i)) {
                            resValues[i] = op.apply(v1.get(i), v2Values[i]);
                        } else {
                            resValues[i] = op.apply(0, v2Values[i]);
                        }
                    }
                }
            }
        } else if (v1.isSorted() && v2.isDense()) {
            if (op.isKeepStorage()) {
                $itype.toLowerCase() [] resIndices = newStorage.getIndices();
				$dtype1.toLowerCase() [] resValues = newStorage.getValues();
				$itype.toLowerCase() [] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [] v1values = v1.getStorage().getValues();
				$dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();
				for (int i = 0; i < resValues.length; i++) {
				  resIndices[i] = i;
				  resValues[i] = op.apply(0, v2Values[i]);
				}
				$itype.toLowerCase() size = v1.size();

				for (int i = 0; i < size; i++) {
				  $itype.toLowerCase() idx = v1Indices[i];
				  newStorage.set(i, op.apply(v1values[i],v2Values[idx]));
				}
            } else {
                $dtype1.toLowerCase() [ ] resValues = newStorage.getValues();
                $dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();

                if (v1.size() < Constant.denseLoopThreshold * v1.getDim()) {
                    $itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
                    $dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
                    for (int i = 0; i < resValues.length; i++) {
                        resValues[i] = op.apply(0, v2Values[i]);
                    }

                    $itype.toLowerCase() size = v1.size();
                    for (int i = 0; i < size; i++) {
                         $itype.toLowerCase() idx = v1Indices[i];
                        resValues[idx] = op.apply(v1Values[i], v2Values[idx]);
                    }
                } else {
                    ${itype}${dtype1}VectorStorage v1Storage = v1.getStorage();
                    for (int i = 0; i < resValues.length; i++) {
                        if (v1Storage.hasKey(i)) {
                            resValues[i] = op.apply(v1.get(i), v2Values[i]);
                        } else {
                            resValues[i] = op.apply(0, v2Values[i]);
                        }
                    }
                }
            }
        } else if (v1.isSparse() && v2.isSparse()) {
#else
        if (v1.isSparse() && v2.isSparse()) {
#end
            if (op.isKeepStorage()) {
                // multi-rehash
				${itype}${dtype1}VectorStorage v1Storage = v1.getStorage();
				${itype}${dtype2}VectorStorage v2Storage = v2.getStorage();
				for (int i = 0; i < v1.getDim(); i++) {
				  if (v1Storage.hasKey(i) && v2Storage.hasKey(i)) {
					newStorage.set(i, op.apply(v1.get(i), v2.get(i)));
				  } else if (v1Storage.hasKey(i) && !v2Storage.hasKey(i)) {
					newStorage.set(i, op.apply(v1.get(i), 0));
				  } else if (!v1Storage.hasKey(i) && v2Storage.hasKey(i)) {
					newStorage.set(i, op.apply(0, v2.get(i)));
				  } else {
					newStorage.set(i, op.apply(($dtype1.toLowerCase())0, 0));
				  }
				}
            } else {
#if (${itype} == "Int")
                $dtype1.toLowerCase() [ ] resValues = newStorage.getValues();
                ObjectIterator<${itype}2${dtype1}Map.Entry> iter1 = v1.getStorage().entryIterator();
                while (iter1.hasNext()) {
                    ${itype}2${dtype1}Map.Entry entry = iter1.next();
                    $itype.toLowerCase() idx = entry.get${itype}Key();
                    resValues[idx] = entry.get${dtype1}Value();
                }

                if (v2.size() < Constant.denseLoopThreshold * v2.getDim()) {
                    for (int i = 0; i < resValues.length; i++) {
                        resValues[i] = op.apply(resValues[i], 0);
                    }
                    ObjectIterator<${itype}2${dtype2}Map.Entry> iter = v2.getStorage().entryIterator();
                    while (iter.hasNext()) {
                        ${itype}2${dtype2}Map.Entry entry = iter.next();
                        $itype.toLowerCase() idx = entry.get${itype}Key();
                        if (v1.getStorage().hasKey(idx)){
                            resValues[idx] = op.apply(v1.get(idx), entry.get${dtype2}Value());
                        }
                    }
                } else {
                    ${itype}${dtype2}VectorStorage v2Storage = v2.getStorage();
                    for (int i = 0; i < resValues.length; i++) {
                        if (v2Storage.hasKey(i)) {
                            resValues[i] = op.apply(resValues[i], v2.get(i));
                        } else {
                            resValues[i] = op.apply(resValues[i], 0);
                        }
                    }
                }
#else
                // multi-rehash
                ${itype}${dtype1}VectorStorage v1Storage = v1.getStorage();
                ${itype}${dtype2}VectorStorage v2Storage = v2.getStorage();
                for (int i = 0; i < v1.getDim(); i++) {
                    if (v1Storage.hasKey(i) && v2Storage.hasKey(i)) {
                        newStorage.set(i, op.apply(v1.get(i), v2.get(i)));
                    } else if (v1Storage.hasKey(i) && !v2Storage.hasKey(i)) {
                        newStorage.set(i, op.apply(v1.get(i), 0));
                    }else if (!v1Storage.hasKey(i) && v2Storage.hasKey(i)) {
                        newStorage.set(i, op.apply(0, v2.get(i)));
                    }else{
#if (${dtype1} == "Double" )
                        newStorage.set(i, op.apply(0.0, 0));
#elseif(${dtype1} == "Float")
                        newStorage.set(i, op.apply(0.0f, 0));
#else
                        newStorage.set(i, op.apply(0, 0));
#end
                    }
                }
#end
            }
        } else if (v1.isSparse() && v2.isSorted()) {
            if (op.isKeepStorage()) {
                ${itype}${dtype1}VectorStorage v1Storage = v1.getStorage();
				${itype}${dtype2}VectorStorage v2Storage = v2.getStorage();
				for (int i = 0; i < v1.getDim(); i++) {
				  if (v1Storage.hasKey(i) && v2Storage.hasKey(i)) {
					newStorage.set(i, op.apply(v1.get(i), v2.get(i)));
				  } else if (v1Storage.hasKey(i) && !v2Storage.hasKey(i)) {
					newStorage.set(i, op.apply(v1.get(i), 0));
				  } else if (!v1Storage.hasKey(i) && v2Storage.hasKey(i)) {
					newStorage.set(i, op.apply(0, v2.get(i)));
				  } else {
					newStorage.set(i, op.apply(($dtype1.toLowerCase())0, 0));
				  }
				}
            } else {
#if (${itype} == "Int")
                $dtype1.toLowerCase() [ ] resValues = newStorage.getValues();
                ObjectIterator<${itype}2${dtype1}Map.Entry> iter1 = v1.getStorage().entryIterator();
                while (iter1.hasNext()) {
                    ${itype}2${dtype1}Map.Entry entry = iter1.next();
                    $itype.toLowerCase() idx = entry.get${itype}Key();
                    resValues[idx] = entry.get${dtype1}Value();
                }

                if (v2.size() < Constant.denseLoopThreshold * v2.getDim()) {
                    $itype.toLowerCase() [ ] v2Indices = v2.getStorage().getIndices();
                    $dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();
                    for (int i = 0; i < resValues.length; i++) {
                        resValues[i] = op.apply(resValues[i], 0);
                    }

                    $itype.toLowerCase() size = v2.size();
                    for (int i = 0; i < size; i++) {
                        $itype.toLowerCase() idx = v2Indices[i];
                         if (v1.getStorage().hasKey(idx)){
                             resValues[idx] = op.apply(v1.get(idx), v2Values[i]);
                         }
                    }
                } else {
                    ${itype}${dtype2}VectorStorage v2Storage = v2.getStorage();
                    for (int i = 0; i < resValues.length; i++) {
                        if (v2Storage.hasKey(i)) {
                            resValues[i] = op.apply(resValues[i], v2.get(i));
                        } else {
                            resValues[i] = op.apply(resValues[i], 0);
                        }
                    }
                }
#else
                ${itype}${dtype1}VectorStorage v1Storage = v1.getStorage();
                ${itype}${dtype2}VectorStorage v2Storage = v2.getStorage();
                for (int i = 0; i < v1.getDim(); i++) {
                    if (v1Storage.hasKey(i) && v2Storage.hasKey(i)) {
                        newStorage.set(i, op.apply(v1.get(i), v2.get(i)));
                    } else if (v1Storage.hasKey(i) && !v2Storage.hasKey(i)) {
                        newStorage.set(i, op.apply(v1.get(i), 0));
                    }else if (!v1Storage.hasKey(i) && v2Storage.hasKey(i)) {
                        newStorage.set(i, op.apply(0, v2.get(i)));
                    }else{
#if (${dtype1} == "Double" )
                        newStorage.set(i, op.apply(0.0, 0));
#elseif(${dtype1} == "Float")
                        newStorage.set(i, op.apply(0.0f, 0));
#else
                        newStorage.set(i, op.apply(0, 0));
#end
                    }
                }
#end
            }
        } else if (v1.isSorted() && v2.isSparse()) {
            if (op.isKeepStorage()) {
                ${itype}${dtype1}VectorStorage v1Storage = v1.getStorage();
				${itype}${dtype2}VectorStorage v2Storage = v2.getStorage();
				for (int i = 0; i < v1.getDim(); i++) {
				  if (v1Storage.hasKey(i) && v2Storage.hasKey(i)) {
					newStorage.set(i, op.apply(v1.get(i), v2.get(i)));
				  } else if (v1Storage.hasKey(i) && !v2Storage.hasKey(i)) {
					newStorage.set(i, op.apply(v1.get(i), 0));
				  } else if (!v1Storage.hasKey(i) && v2Storage.hasKey(i)) {
					newStorage.set(i, op.apply(0, v2.get(i)));
				  } else {
					newStorage.set(i, op.apply(($dtype1.toLowerCase())0, 0));
				  }
				}
            } else {
#if (${itype} == "Int")
                $dtype1.toLowerCase() [ ] resValues = newStorage.getValues();

                $itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
                $dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
                $itype.toLowerCase() size = v1.size();
                for (int i = 0; i < size; i++) {
                    $itype.toLowerCase() idx = v1Indices[i];
                    resValues[idx] = v1Values[i];
                }

                if (v2.size() < Constant.denseLoopThreshold * v2.getDim()) {
                    for (int i = 0; i < resValues.length; i++) {
                        resValues[i] = op.apply(resValues[i], 0);
                    }
                    ObjectIterator<${itype}2${dtype2}Map.Entry> iter = v2.getStorage().entryIterator();
                    while (iter.hasNext()) {
                        ${itype}2${dtype2}Map.Entry entry = iter.next();
                        $itype.toLowerCase() idx = entry.get${itype}Key();
                        if (v1.getStorage().hasKey(idx)){
                            resValues[idx] = op.apply(v1.get(idx), entry.get${dtype2}Value());
                        }
                    }
                } else {
                    ${itype}${dtype2}VectorStorage v2Storage = v2.getStorage();
                    for (int i = 0; i < resValues.length; i++) {
                        if (v2Storage.hasKey(i)) {
                            resValues[i] = op.apply(resValues[i], v2.get(i));
                        } else {
                            resValues[i] = op.apply(resValues[i], 0);
                        }
                    }
                }
#else
                ${itype}${dtype1}VectorStorage v1Storage = v1.getStorage();
                ${itype}${dtype2}VectorStorage v2Storage = v2.getStorage();
                for (int i = 0; i < v1.getDim(); i++) {
                    if (v1Storage.hasKey(i) && v2Storage.hasKey(i)) {
                        newStorage.set(i, op.apply(v1.get(i), v2.get(i)));
                    } else if (v1Storage.hasKey(i) && !v2Storage.hasKey(i)) {
                        newStorage.set(i, op.apply(v1.get(i), 0));
                    }else if (!v1Storage.hasKey(i) && v2Storage.hasKey(i)) {
                        newStorage.set(i, op.apply(0, v2.get(i)));
                    }else{
#if (${dtype1} == "Double" )
                        newStorage.set(i, op.apply(0.0, 0));
#elseif(${dtype1} == "Float")
                        newStorage.set(i, op.apply(0.0f, 0));
#else
                        newStorage.set(i, op.apply(0, 0));
#end
                    }
                }
#end
            }
        } else if (v1.isSorted() && v2.isSorted()) {
            if (op.isKeepStorage()) {
                $itype.toLowerCase() [] resIndices = newStorage.getIndices();
				$dtype1.toLowerCase() [] resValues = newStorage.getValues();

				int v1Pointor = 0;
				int v2Pointor = 0;
				$itype.toLowerCase() size1 = v1.size();
				$itype.toLowerCase() size2 = v2.size();

				$itype.toLowerCase() [] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() [] v2Indices = v2.getStorage().getIndices();
				$dtype2.toLowerCase() [] v2Values = v2.getStorage().getValues();

				if (!op.isCompare()) {
#if (${dtype1} == "Double" || ${dtype1} == "Float")
                    for (int i = 0; i < resValues.length; i++) {
                        resValues[i] = ${dtype1}.NaN;
                    }
#else
                    if (size1 != v1.getDim() && size2 != v2.getDim()){
                        for (int i = 0; i < v1.getDim(); i++) {
                            resValues[i] = 0/0;
                        }
                    }
#end
				}

				int globalPointor = 0;

				while (v1Pointor < size1 && v2Pointor < size2) {
				  if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
					resIndices[globalPointor] = v1Indices[v1Pointor];
					resValues[globalPointor] = op.apply(v1Values[v1Pointor], v2Values[v2Pointor]);
					v1Pointor++;
					v2Pointor++;
					globalPointor++;
				  } else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
					resIndices[globalPointor] = v1Indices[v1Pointor];
					resValues[globalPointor] = op.apply(v2Values[v2Pointor], 0);
					v1Pointor++;
					globalPointor++;
				  } else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
					resIndices[globalPointor] = v2Indices[v2Pointor];
					resValues[globalPointor] = op.apply(0, v2Values[v2Pointor]);
					v2Pointor++;
					globalPointor++;
				  }
				}
            } else {
                $dtype1.toLowerCase() [] resValues = newStorage.getValues();

                int v1Pointor = 0;
                int v2Pointor = 0;
                $itype.toLowerCase() size1 = v1.size();
                $itype.toLowerCase() size2 = v2.size();

                $itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
                $dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
                $itype.toLowerCase() [ ] v2Indices = v2.getStorage().getIndices();
                $dtype2.toLowerCase() [ ] v2Values = v2.getStorage().getValues();

                if (!op.isCompare()){
#if (${dtype1} == "Double" || ${dtype1} == "Float")
                    for (int i = 0; i < resValues.length; i++) {
                        resValues[i] = ${dtype1}.NaN;
                    }
#else
                    if (size1 != v1.getDim() && size2 != v2.getDim()){
                        for (int i = 0; i < v1.getDim(); i++) {
                            resValues[i] = 0/0;
                        }
                    }
#end
                }

                while (v1Pointor < size1 && v2Pointor < size2) {
                    if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
                        newStorage.set(v1Indices[v1Pointor], op.apply(v1Values[v1Pointor], v2Values[v2Pointor]));
                        v1Pointor++;
                        v2Pointor++;
                    } else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
                         newStorage.set(v1Indices[v1Pointor], op.apply(v1Values[v1Pointor], 0));
                        v1Pointor++;
                    } else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
                         newStorage.set(v2Indices[v2Pointor], op.apply(0, v2Values[v2Pointor]));
                        v2Pointor++;
                    }
                }
            }
        } else {
            throw new AngelException("The operation is not support!");
        }
 		v1.setStorage(newStorage);

        return v1;
    }

#end
#end
#end

#foreach (${itype} in ${itypes})
#foreach (${dtype1} in ${dtypes})
    public static Vector apply(${itype}${dtype1}Vector v1, ${itype}DummyVector v2, Binary op) {
    	${itype}${dtype1}VectorStorage newStorage = (${itype}${dtype1}VectorStorage) StorageSwitch.apply(v1, v2, op);

#if (${itype} == "Int")
        if (v1.isDense()) {
            $dtype1.toLowerCase() [ ] resValues = newStorage.getValues();
            $dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
            for (int i=0; i < v1.getDim(); i++){
                resValues[i] = op.apply(v1Values[i], v2.get(i));
            }
        } else if (v1.isSparse()) {
#else
        if (v1.isSparse()) {
#end
            if (op.isKeepStorage()) {
                // multi-rehash
				${itype}${dtype1}VectorStorage v1Storage = v1.getStorage();
				for (int i = 0; i < v1.getDim(); i++) {
				  if (v1Storage.hasKey(i)) {
					newStorage.set(i, op.apply(v1.get(i),v2.get(i)));
				  } else {
					newStorage.set(i, op.apply(0, v2.get(i)));
				  }
				}
            } else {
#if (${itype} == "Int")
                $dtype1.toLowerCase() [ ] resValues = newStorage.getValues();
                ObjectIterator<${itype}2${dtype1}Map.Entry> iter1 = v1.getStorage().entryIterator();
                while (iter1.hasNext()) {
                    ${itype}2${dtype1}Map.Entry entry = iter1.next();
                    $itype.toLowerCase() idx = entry.get${itype}Key();
                    resValues[idx] = entry.get${dtype1}Value();
                }

				int[] v2Indices = v2.getIndices();
                int size = v2.size();
				for (int i=0; i < size; i++){
					int idx = v2Indices[i];
					resValues[idx] = op.apply(v1.get(idx), 1);
				}
#else
                // multi-rehash
                ${itype}${dtype1}VectorStorage v1Storage = v1.getStorage();
                for (int i = 0; i < v1.getDim(); i++) {
                    if (v1Storage.hasKey(i)) {
                        newStorage.set(i, op.apply(v1.get(i), v2.get(i)));
                    }else{
#if (${dtype1} == "Double" )
                        newStorage.set(i, op.apply(0.0, v2.get(i)));
#elseif(${dtype1} == "Float")
                        newStorage.set(i, op.apply(0.0f, v2.get(i)));
#else
                        newStorage.set(i, op.apply(0, v2.get(i)));
#end
                    }
                }
#end
            }
        } else { // sorted
            if (op.isKeepStorage()) {
				int v1Pointor = 0;
				int v2Pointor = 0;
				$itype.toLowerCase() size1 = v1.size();
				$itype.toLowerCase() size2 = v2.size();

				$itype.toLowerCase() [] resIndices = newStorage.getIndices();
				$dtype1.toLowerCase() [] resValues = newStorage.getValues();
				$itype.toLowerCase() [] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() [] v2Indices = v2.getIndices();
				int [] v2Values = v2.getValues();

				if (!op.isCompare()) {
#if (${dtype1} == "Double" || ${dtype1} == "Float")
					for (int i = 0; i < resValues.length; i++) {
						resValues[i] = ${dtype1}.NaN;
					}
#else
					if (size1 != v1.getDim() && size2 != v2.getDim()){
						for (int i = 0; i < v1.getDim(); i++) {
							resValues[i] = 0/0;
						}
					}
#end
				}

				int globalPointor = 0;

				while (v1Pointor < size1 && v2Pointor < size2) {
				  if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
					resIndices[globalPointor] = v1Indices[v1Pointor];
					resValues[globalPointor] = op.apply(v1Values[v1Pointor], v2Values[v2Pointor]);
					v1Pointor++;
					v2Pointor++;
					globalPointor++;
				  } else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
					resIndices[globalPointor] = v1Indices[v1Pointor];
					resValues[globalPointor] = op.apply(v2Values[v2Pointor], 0);
					v1Pointor++;
					globalPointor++;
				  } else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
					resIndices[globalPointor] = v2Indices[v2Pointor];
					resValues[globalPointor] = op.apply(0, v2Values[v2Pointor]);
					v2Pointor++;
					globalPointor++;
				  }
				}
			} else {
				$dtype1.toLowerCase() [ ] resValues = newStorage.getValues();

				int v1Pointor = 0;
				int v2Pointor = 0;
				$itype.toLowerCase() size1 = v1.size();
				$itype.toLowerCase() size2 = v2.size();

				$itype.toLowerCase() [ ] v1Indices = v1.getStorage().getIndices();
				$dtype1.toLowerCase() [ ] v1Values = v1.getStorage().getValues();
				$itype.toLowerCase() [ ] v2Indices = v2.getIndices();
				int [ ] v2Values = v2.getValues();

				if (!op.isCompare()){
#if (${dtype1} == "Double" || ${dtype1} == "Float")
					for (int i = 0; i < resValues.length; i++) {
						resValues[i] = ${dtype1}.NaN;
					}
#else
					if (size1 != v1.getDim() && size2 != v2.getDim()){
						for (int i = 0; i < v1.getDim(); i++) {
							resValues[i] = 0/0;
						}
					}
#end
				}

				while (v1Pointor < size1 && v2Pointor < size2) {
					if (v1Indices[v1Pointor] == v2Indices[v2Pointor]) {
						newStorage.set(v1Indices[v1Pointor], op.apply(v1Values[v1Pointor], v2Values[v2Pointor]));
						v1Pointor++;
						v2Pointor++;
					} else if (v1Indices[v1Pointor] < v2Indices[v2Pointor]) {
						newStorage.set(v1Indices[v1Pointor], op.apply(v1Values[v1Pointor], 0));
						v1Pointor++;
					} else { // v1Indices[v1Pointor] > v2Indices[v2Pointor]
						newStorage.set(v2Indices[v2Pointor], op.apply(0, v2Values[v2Pointor]));
						v2Pointor++;
					}
				}
			}
        }
		v1.setStorage(newStorage);

        return v1;
    }
#end
#end

}